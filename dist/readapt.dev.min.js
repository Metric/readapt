/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/client.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/client.js":
/*!***********************!*\
  !*** ./src/client.js ***!
  \***********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _h__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./h */ "./src/h.ts");
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./component */ "./src/component.ts");
/* harmony import */ var _readapt_dom_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./readapt-dom/index */ "./src/readapt-dom/index.ts");
/* harmony import */ var _render__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./render */ "./src/render.ts");





_readapt_dom_index__WEBPACK_IMPORTED_MODULE_2__["DOM"].document = document;
window.h = _h__WEBPACK_IMPORTED_MODULE_0__["h"];
window.Component = _component__WEBPACK_IMPORTED_MODULE_1__["default"];
window.Readapt = {
    render: _render__WEBPACK_IMPORTED_MODULE_3__["render"],
    hydrate: _render__WEBPACK_IMPORTED_MODULE_3__["hydrate"]
};
window.React = {
    createElement: _h__WEBPACK_IMPORTED_MODULE_0__["h"],
    render: _render__WEBPACK_IMPORTED_MODULE_3__["render"],
    hydrate: _render__WEBPACK_IMPORTED_MODULE_3__["hydrate"]
};


/***/ }),

/***/ "./src/component.ts":
/*!**************************!*\
  !*** ./src/component.ts ***!
  \**************************/
/*! exports provided: DEFER_PROMISE, DEFER_TIMEOUT, DEFER_ANIMATION, default, renderComponent, prepareRender, unmountComponent, buildComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFER_PROMISE", function() { return DEFER_PROMISE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFER_TIMEOUT", function() { return DEFER_TIMEOUT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFER_ANIMATION", function() { return DEFER_ANIMATION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Component; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderComponent", function() { return renderComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prepareRender", function() { return prepareRender; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unmountComponent", function() { return unmountComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildComponent", function() { return buildComponent; });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./src/constants.ts");
/* harmony import */ var _readapt_vdom_diff__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./readapt-vdom/diff */ "./src/readapt-vdom/diff.ts");
/* harmony import */ var _render__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./render */ "./src/render.ts");

var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



const DEFER_PROMISE = Promise.resolve().then.bind(Promise.resolve());
const DEFER_TIMEOUT = setTimeout;
const DEFER_ANIMATION = typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame : DEFER_PROMISE;
class Component {
    constructor(props, parent, renderMode) {
        this.disabled = false;
        this.key = props.key;
        this.ref = props.ref;
        this.asyncMethod = DEFER_PROMISE;
        this.renderMode = renderMode || _constants__WEBPACK_IMPORTED_MODULE_0__["SYNC"];
        this.child = null;
        this.base = null;
        this.parent = parent;
        this.parentNode = null;
        this.children = [];
        this.state = {};
        this.__props = props;
        delete props.ref;
        delete props.key;
        this.observe(props);
    }
    componentChange(key, value, previous) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.shouldComponentUpdate(key, value, previous)) {
                if (this.renderMode === _constants__WEBPACK_IMPORTED_MODULE_0__["SYNC"])
                    yield renderComponent(this, this.parentNode, false);
                else if (this.renderMode === _constants__WEBPACK_IMPORTED_MODULE_0__["ASYNC"])
                    Object(_render__WEBPACK_IMPORTED_MODULE_2__["enqueue"])(this);
            }
        });
    }
    forceUpdate() {
        return __awaiter(this, void 0, void 0, function* () {
            yield renderComponent(this, this.parentNode, false);
        });
    }
    componentDidUpdate(previous) {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    render() {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    componentWillUnmount() {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    componentDidMount() {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    setState(sm) {
        return __awaiter(this, void 0, void 0, function* () {
            const update = new Promise((r, rj) => __awaiter(this, void 0, void 0, function* () {
                //immutable from original state
                const oldState = Object(_constants__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, this.state);
                const finalState = Object(_constants__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, this.state);
                let newState = {};
                if (typeof sm === 'function') {
                    //copy current props for immutable
                    const props = {};
                    if (this.__props) {
                        for (let k in this.__props)
                            props[k] = this[k];
                    }
                    //immutable from original state
                    newState = sm(Object(_constants__WEBPACK_IMPORTED_MODULE_0__["extend"])(newState, this.state), props) || newState;
                    Object(_constants__WEBPACK_IMPORTED_MODULE_0__["extend"])(finalState, newState);
                }
                else if (typeof sm === 'object')
                    Object(_constants__WEBPACK_IMPORTED_MODULE_0__["extend"])(finalState, sm);
                this.state = finalState;
                for (let k in finalState) {
                    if (oldState[k] !== finalState[k])
                        yield this.componentChange(k, newState[k], oldState[k]);
                }
                r();
            }));
            if (this.renderMode === _constants__WEBPACK_IMPORTED_MODULE_0__["SYNC"])
                yield update;
            else if (this.renderMode === _constants__WEBPACK_IMPORTED_MODULE_0__["ASYNC"])
                Object(_render__WEBPACK_IMPORTED_MODULE_2__["enqueueState"])(this, update);
        });
    }
    shouldComponentUpdate(key, value, previous) {
        return true;
    }
    observe(o) {
        for (let k in o) {
            let v = o[k];
            if (typeof v === 'function') {
                this[k] = v;
                continue;
            }
            Object.defineProperty(this, `\$${k}`, { value: v, writable: true, enumerable: false });
            Object.defineProperty(this, k, {
                enumerable: true,
                get() {
                    return this[`\$${k}`];
                },
                set(nv) {
                    const prev = this[`\$${k}`];
                    this[`\$${k}`] = nv;
                    if (!this.disabled && prev !== nv) {
                        this.componentChange(k, nv, prev);
                    }
                }
            });
        }
    }
}
function renderComponent(component, parentNode, hydrating) {
    return __awaiter(this, void 0, void 0, function* () {
        let isUpdate = component.base, p, props, rendered, toUnmount, cbase, inst, base, type;
        if (component.disabled)
            return;
        rendered = yield component.render();
        if (!rendered || Array.isArray(rendered)) {
            if (component.child) {
                yield unmountComponent(component.child);
                component.child = null;
            }
            if (component.base) {
                component.base._component = null;
                yield Object(_readapt_vdom_diff__WEBPACK_IMPORTED_MODULE_1__["recollectNodeTree"])(component.base, false);
                component.base = null;
            }
            return;
        }
        component.parentNode = parentNode;
        cbase = base = component.base;
        if (typeof rendered.nodeName === 'function') {
            props = rendered.attributes;
            inst = component.child;
            if (inst && inst.constructor === rendered.nodeName) {
                const update = prepareRender(inst, props, rendered.childNodes);
                if (update._different) {
                    yield renderComponent(inst, inst.parentNode, hydrating);
                    yield inst.componentDidUpdate(update);
                }
            }
            else {
                toUnmount = inst;
                type = rendered.nodeName;
                if (cbase && !toUnmount && !hydrating) {
                    cbase._component = null;
                    yield Object(_readapt_vdom_diff__WEBPACK_IMPORTED_MODULE_1__["recollectNodeTree"])(cbase, false);
                }
                component.child = inst = new type(props, component);
                if (hydrating)
                    inst.base = cbase;
                inst.children = rendered.childNodes;
                if (inst.ref)
                    inst.ref(inst);
                yield renderComponent(inst, component.parentNode, hydrating);
            }
            base = inst.base;
        }
        if (typeof rendered.nodeName !== 'function') {
            toUnmount = component.child;
            if (toUnmount)
                cbase = component.child = null;
            base = yield Object(_readapt_vdom_diff__WEBPACK_IMPORTED_MODULE_1__["diff"])(cbase, rendered, component.parentNode, true);
        }
        if (cbase && base !== cbase && inst !== component.child) {
            p = cbase.parentNode;
            if (p && base !== p) {
                p.replaceChild(base, cbase);
                if (!toUnmount) {
                    cbase._component = null;
                    yield Object(_readapt_vdom_diff__WEBPACK_IMPORTED_MODULE_1__["recollectNodeTree"])(cbase, false);
                }
            }
        }
        if (toUnmount)
            yield unmountComponent(toUnmount);
        component.base = base;
        if (base && !component.child) {
            let cmp = component, t = component;
            while ((t = t.parent)) {
                (cmp = t).base = base;
            }
            base._component = cmp;
        }
        if (!isUpdate) {
            yield component.componentDidMount();
        }
    });
}
function prepareRender(inst, props, children) {
    let diff = { _different: false };
    if (inst.ref)
        inst.ref(inst);
    inst.children = children;
    inst.disabled = true;
    for (let n in props) {
        if (inst[n] !== props[n]) {
            diff[n] = inst[n];
            diff._different = true;
        }
        inst[n] = props[n];
    }
    inst.disabled = false;
    return diff;
}
function unmountComponent(component) {
    return __awaiter(this, void 0, void 0, function* () {
        const base = component.base;
        component.disabled = true;
        yield component.componentWillUnmount();
        if (component.child)
            yield unmountComponent(component.child);
        component.base = null;
        component.parent = null;
        component.child = null;
        if (base) {
            base._component = null;
            if (base[_constants__WEBPACK_IMPORTED_MODULE_0__["ATTR_KEY"]] && base[_constants__WEBPACK_IMPORTED_MODULE_0__["ATTR_KEY"]].ref)
                base[_constants__WEBPACK_IMPORTED_MODULE_0__["ATTR_KEY"]].ref(null);
            yield Object(_readapt_vdom_diff__WEBPACK_IMPORTED_MODULE_1__["recollectNodeTree"])(base, false);
        }
        if (component.ref)
            component.ref(null);
    });
}
function buildComponent(dom, node, parentNode, hydrating) {
    return __awaiter(this, void 0, void 0, function* () {
        let c = dom && dom._component, isDirectOwner = c && c.constructor === node.nodeName, props = node.attributes, type = node.nodeName;
        if (isDirectOwner && c) {
            const update = prepareRender(c, props, node.childNodes);
            if (update._different) {
                yield renderComponent(c, parentNode, hydrating);
                yield c.componentDidUpdate(update);
            }
            dom = c.base;
        }
        else {
            if (!hydrating)
                yield Object(_readapt_vdom_diff__WEBPACK_IMPORTED_MODULE_1__["recollectNodeTree"])(dom, false);
            c = new type(props, null);
            c.children = node.childNodes;
            if (hydrating)
                c.base = dom;
            if (c.ref)
                c.ref(c);
            yield renderComponent(c, parentNode, hydrating);
            dom = c.base;
        }
        return dom;
    });
}


/***/ }),

/***/ "./src/constants.ts":
/*!**************************!*\
  !*** ./src/constants.ts ***!
  \**************************/
/*! exports provided: ATTR_KEY, ASYNC, SYNC, NONE, FORCE, extend */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ATTR_KEY", function() { return ATTR_KEY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ASYNC", function() { return ASYNC; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SYNC", function() { return SYNC; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NONE", function() { return NONE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FORCE", function() { return FORCE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extend", function() { return extend; });

const ATTR_KEY = '__readapt__';
const ASYNC = 3;
const SYNC = 1;
const NONE = 0;
const FORCE = 2;
function extend(base, ref) {
    for (let k in ref)
        base[k] = ref[k];
    return base;
}
;


/***/ }),

/***/ "./src/h.ts":
/*!******************!*\
  !*** ./src/h.ts ***!
  \******************/
/*! exports provided: h */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return h; });
/* harmony import */ var _readapt_vdom_vnode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./readapt-vdom/vnode */ "./src/readapt-vdom/vnode.ts");


function h(nodeName, attributes, ...children) {
    attributes = attributes || {};
    const stack = Array(0);
    let child, p = new _readapt_vdom_vnode__WEBPACK_IMPORTED_MODULE_0__["default"](nodeName, typeof nodeName === 'function' ? 'component' : 'element', '');
    children.forEach(c => stack.unshift(c));
    if (attributes && attributes.children != null) {
        if (!stack.length)
            stack.push(attributes.children);
        delete attributes.children;
    }
    while (stack.length) {
        child = stack.pop();
        if (Array.isArray(child))
            child.forEach(c => stack.unshift(c));
        else {
            if (child instanceof _readapt_vdom_vnode__WEBPACK_IMPORTED_MODULE_0__["default"])
                p.childNodes.push(child);
            else
                p.childNodes.push(new _readapt_vdom_vnode__WEBPACK_IMPORTED_MODULE_0__["default"]('#text', 'text', child));
        }
    }
    p.attributes = attributes;
    p.key = attributes.key ? attributes.key : undefined;
    return p;
}
;


/***/ }),

/***/ "./src/readapt-dom/index.ts":
/*!**********************************!*\
  !*** ./src/readapt-dom/index.ts ***!
  \**********************************/
/*! exports provided: DOM, createNode, removeNode, isSameNodeType, setAccessor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOM", function() { return DOM; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createNode", function() { return createNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeNode", function() { return removeNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSameNodeType", function() { return isSameNodeType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setAccessor", function() { return setAccessor; });

const DOM = {
    document: null
};
function createNode(nodeName) {
    return DOM.document.createElement(nodeName);
}
function removeNode(node) {
    const parentNode = node.parentNode;
    if (parentNode)
        parentNode.removeChild(node);
}
function isSameNodeType(node, vnode, hydrating) {
    if (!node)
        return false;
    if (vnode.nodeType === 'text')
        return node.splitText;
    if (typeof vnode.nodeName === 'string')
        return !node._component && node.nodeName.toLowerCase() === vnode.nodeName.toLowerCase();
    return hydrating || (node._component && node._component.constructor === vnode.nodeName);
}
function setAccessor(node, name, old, value) {
    if (name === 'className')
        name = 'class';
    if (name === '__html')
        name = 'html';
    if (name === 'key') {
        //do nothing
    }
    else if (name === 'ref') {
        if (old)
            old(null);
        if (value)
            value(node);
    }
    //please for the love of god
    //never use this unless you really have to
    //for showing mark down or something similar
    else if (name === 'html') {
        if (old !== value) {
            node.innerHTML = value;
        }
    }
    else if (name === 'class') {
        if (!value || typeof value === 'string') {
            node.className = value || '';
        }
        else if (value && typeof value === 'object') {
            if (typeof old === 'object') {
                for (let i in old) {
                    if (!(i in value))
                        node.classList.remove(i);
                }
            }
            for (let i in value) {
                if (value[i])
                    node.classList.add(i);
                else
                    node.classList.remove(i);
            }
        }
    }
    else if (name === 'style') {
        if (value && typeof value === 'object') {
            if (typeof old === 'object') {
                for (let i in old) {
                    if (!(i in value))
                        node.style[i] = '';
                }
            }
            else
                node.style.cssText = '';
            for (let i in value)
                node.style[i] = value[i] || '';
        }
        else if (!value || typeof value === 'string' || typeof old === 'string') {
            node.style.cssText = value || '';
        }
    }
    else if (name[0] === 'o' && name[1] === 'n') {
        let useCapture = name !== (name = name.replace(/Capture$/, ''));
        name = name.toLowerCase().substring(2);
        if (value) {
            if (!old)
                node.addEventListener(name, value, useCapture);
        }
        else if (old)
            node.removeEventListener(name, old, useCapture);
    }
    else if (name !== 'list' && name !== 'type' && name in node) {
        try {
            node[name] = value == null ? '' : value;
        }
        catch (e) {
            if ((value == null || value === false) && name !== 'spellcheck')
                node.removeAttribute(name);
        }
    }
    else {
        if (value == null || value === false)
            node.removeAttribute(name);
        else if (typeof value !== 'function')
            node.setAttribute(name, value);
    }
}


/***/ }),

/***/ "./src/readapt-vdom/diff.ts":
/*!**********************************!*\
  !*** ./src/readapt-vdom/diff.ts ***!
  \**********************************/
/*! exports provided: inputs, hydrating, diffLevel, diff, recollectNodeTree, removeChildren */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inputs", function() { return inputs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hydrating", function() { return hydrating; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "diffLevel", function() { return diffLevel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "diff", function() { return diff; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "recollectNodeTree", function() { return recollectNodeTree; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeChildren", function() { return removeChildren; });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../component */ "./src/component.ts");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _readapt_dom_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../readapt-dom/index */ "./src/readapt-dom/index.ts");

var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





const inputs = [
    'input',
    'textarea',
    'select',
    'meter',
    'progress',
    'button'
];
let hydrating = false;
let diffLevel = 0;
function diff(dom, node, parent, root) {
    return __awaiter(this, void 0, void 0, function* () {
        let ret = null;
        if (!diffLevel++)
            hydrating = dom && !dom[_constants__WEBPACK_IMPORTED_MODULE_1__["ATTR_KEY"]];
        ret = yield idiff(dom, node, parent, root);
        if (parent && ret.parentNode !== parent)
            parent.appendChild(ret);
        if (!--diffLevel) {
            hydrating = false;
        }
        return ret;
    });
}
function idiff(dom, node, parent, root) {
    return __awaiter(this, void 0, void 0, function* () {
        let out = dom;
        if (node.nodeValue == null || typeof node.nodeValue === 'boolean')
            node.nodeValue = '';
        if (node.nodeType === 'text') {
            if (dom && dom.splitText && dom.parentNode && (!dom._component || root)) {
                if (dom.nodeValue != node.nodeValue)
                    dom.nodeValue = node.nodeValue;
            }
            else {
                out = _readapt_dom_index__WEBPACK_IMPORTED_MODULE_2__["DOM"].document.createTextNode(node.nodeValue);
                if (dom) {
                    if (dom.parentNode)
                        dom.parentNode.replaceChild(out, dom);
                    yield recollectNodeTree(dom, false);
                }
            }
            out[_constants__WEBPACK_IMPORTED_MODULE_1__["ATTR_KEY"]] = {};
            return out;
        }
        let nodeName = node.nodeName, nroot;
        if (typeof nodeName === 'function')
            return yield Object(_component__WEBPACK_IMPORTED_MODULE_0__["buildComponent"])(dom, node, parent, hydrating);
        if (!dom || dom.nodeName.toLowerCase() !== nodeName.toLowerCase()) {
            out = Object(_readapt_dom_index__WEBPACK_IMPORTED_MODULE_2__["createNode"])(nodeName);
            if (dom) {
                while (dom.firstChild)
                    out.appendChild(dom.firstChild);
                if (dom.parentNode)
                    dom.parentNode.replaceChild(out, dom);
                //recollect
                yield recollectNodeTree(dom, false);
            }
        }
        let props = out[_constants__WEBPACK_IMPORTED_MODULE_1__["ATTR_KEY"]];
        if (!props) {
            props = out[_constants__WEBPACK_IMPORTED_MODULE_1__["ATTR_KEY"]] = {};
            out.getAttributeNames().forEach(n => props[n] = out.getAttribute(n));
        }
        let fc = out.firstChild, children = node.childNodes;
        if ((children && children.length) || fc)
            yield innerDiffNode(out, children, root);
        diffAttributes(out, node.attributes, props);
        return out;
    });
}
function innerDiffNode(dom, vchildren, root) {
    return __awaiter(this, void 0, void 0, function* () {
        let originalChildren = dom.childNodes, children = Array(), keyed = {}, keyedLen = 0, min = 0, len = originalChildren.length, childrenLen = 0, vlen = vchildren ? vchildren.length : 0, j, c, f, vchild, child;
        // Build up a map of keyed children and an Array of unkeyed children:
        if (len !== 0) {
            for (let i = 0; i < len; i++) {
                let child = originalChildren[i], props = child[_constants__WEBPACK_IMPORTED_MODULE_1__["ATTR_KEY"]], key = vlen && props ? child._component ? child._component.key : props.key : null;
                if (key != null) {
                    keyedLen++;
                    keyed[key] = child;
                }
                else if (props || (child.splitText !== undefined ? (hydrating ? child.nodeValue.trim() : true) : hydrating)) {
                    children[childrenLen++] = child;
                }
            }
        }
        if (vlen !== 0) {
            for (let i = 0; i < vlen; i++) {
                vchild = vchildren[i];
                child = null;
                // attempt to find a node based on key matching
                let key = vchild.key;
                if (key != null) {
                    if (keyedLen && keyed[key] !== undefined) {
                        child = keyed[key];
                        keyed[key] = undefined;
                        keyedLen--;
                    }
                }
                // attempt to pluck a node of the same type from the existing children
                else if (min < childrenLen) {
                    for (j = min; j < childrenLen; j++) {
                        if (children[j] !== undefined && Object(_readapt_dom_index__WEBPACK_IMPORTED_MODULE_2__["isSameNodeType"])(c = children[j], vchild, hydrating)) {
                            child = c;
                            children[j] = undefined;
                            if (j === childrenLen - 1)
                                childrenLen--;
                            if (j === min)
                                min++;
                            break;
                        }
                    }
                }
                // morph the matched/found/created DOM child to match vchild (deep)
                child = yield idiff(child, vchild, dom, root);
                f = originalChildren[i];
                if (child && child !== dom && child !== f) {
                    if (f == null) {
                        dom.appendChild(child);
                    }
                    else {
                        dom.insertBefore(child, f);
                        Object(_readapt_dom_index__WEBPACK_IMPORTED_MODULE_2__["removeNode"])(f);
                    }
                }
            }
        }
        // remove unused keyed children:
        if (keyedLen) {
            for (let i in keyed)
                if (keyed[i] !== undefined)
                    yield recollectNodeTree(keyed[i], false);
        }
        // remove orphaned unkeyed children:
        while (min <= childrenLen) {
            if ((child = children[childrenLen--]) !== undefined)
                yield recollectNodeTree(child, false);
        }
    });
}
function recollectNodeTree(node, unmountOnly) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!node)
            return;
        let component = node._component;
        if (component)
            yield Object(_component__WEBPACK_IMPORTED_MODULE_0__["unmountComponent"])(component);
        if (node[_constants__WEBPACK_IMPORTED_MODULE_1__["ATTR_KEY"]] && node[_constants__WEBPACK_IMPORTED_MODULE_1__["ATTR_KEY"]].ref)
            node[_constants__WEBPACK_IMPORTED_MODULE_1__["ATTR_KEY"]].ref(null);
        if (unmountOnly === false || node[_constants__WEBPACK_IMPORTED_MODULE_1__["ATTR_KEY"]])
            Object(_readapt_dom_index__WEBPACK_IMPORTED_MODULE_2__["removeNode"])(node);
        yield removeChildren(node);
    });
}
function removeChildren(node) {
    return __awaiter(this, void 0, void 0, function* () {
        node = node.lastChild;
        while (node) {
            let next = node.previousSibling;
            yield recollectNodeTree(node, true);
            node = next;
        }
    });
}
function diffAttributes(dom, attrs, old) {
    let name;
    for (name in old) {
        if (!(attrs && attrs[name] != null) && old[name] != null)
            Object(_readapt_dom_index__WEBPACK_IMPORTED_MODULE_2__["setAccessor"])(dom, name, old, old[name] = undefined);
    }
    for (name in attrs) {
        if (name !== 'children' && name !== 'innerHTML'
            && (attrs[name] !== ((name === 'value' || name === 'checked') ? dom[name] : old[name])))
            Object(_readapt_dom_index__WEBPACK_IMPORTED_MODULE_2__["setAccessor"])(dom, name, old[name], old[name] = attrs[name]);
    }
}


/***/ }),

/***/ "./src/readapt-vdom/vnode.ts":
/*!***********************************!*\
  !*** ./src/readapt-vdom/vnode.ts ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return VNode; });

class VNode {
    constructor(name, type, v) {
        this.nodeName = name;
        this.nodeType = type;
        this.nodeValue = v;
        this.childNodes = Array(0);
    }
}


/***/ }),

/***/ "./src/render.ts":
/*!***********************!*\
  !*** ./src/render.ts ***!
  \***********************/
/*! exports provided: enqueue, enqueueState, hydrate, render */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enqueue", function() { return enqueue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enqueueState", function() { return enqueueState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hydrate", function() { return hydrate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./src/component.ts");
/* harmony import */ var _readapt_vdom_diff__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./readapt-vdom/diff */ "./src/readapt-vdom/diff.ts");

var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


function enqueue(component) {
    (component.asyncMethod || _component__WEBPACK_IMPORTED_MODULE_0__["DEFER_PROMISE"])(() => __awaiter(this, void 0, void 0, function* () {
        yield Object(_component__WEBPACK_IMPORTED_MODULE_0__["renderComponent"])(component, component.parentNode, false);
    }));
}
function enqueueState(component, state) {
    (component.asyncMethod || _component__WEBPACK_IMPORTED_MODULE_0__["DEFER_PROMISE"])(() => __awaiter(this, void 0, void 0, function* () {
        yield state;
    }));
}
function hydrate(node, parent) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield render(node, parent, parent.firstElementChild);
    });
}
function render(node, parent, merge) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield Object(_readapt_vdom_diff__WEBPACK_IMPORTED_MODULE_1__["diff"])(merge, node, parent, true);
    });
}


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,