!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);class o{constructor(e,t,n){this.nodeName=e,this.nodeType=t,this.nodeValue=n,this.childNodes=Array(0)}}function r(e,t,...n){t=t||{};const r=Array(0);let i,l=new o(e,"function"==typeof e?"component":"element","");for(n.forEach(e=>r.unshift(e)),t&&null!=t.children&&(r.length||r.push(t.children),delete t.children);r.length;)i=r.pop(),Array.isArray(i)?i.forEach(e=>r.unshift(e)):i instanceof o?l.childNodes.push(i):l.childNodes.push(new o("#text","text",i));return l.attributes=t,l.key=t.key?t.key:void 0,l}const i="__readapt__",l=3,s=1,d={document:null};function a(e){const t=e.parentNode;t&&t.removeChild(e)}function c(e,t,n){return!!e&&("text"===t.nodeType?e.splitText:"string"==typeof t.nodeName?!e._component&&e.nodeName.toLowerCase()===t.nodeName.toLowerCase():n||e._component&&e._component.constructor===t.nodeName)}function u(e,t,n,o){if("className"===t&&(t="class"),"key"===t);else if("ref"===t)n&&n(null),o&&o(e);else if("html"===t)n!==o&&(e.innerHTML=o);else if("class"===t)if(o&&"string"!=typeof o){if(o&&"object"==typeof o){if("object"==typeof n)for(let t in n)t in o||e.classList.remove(t);for(let t in o)o[t]?e.classList.add(t):e.classList.remove(t)}}else e.className=o||"";else if("style"===t)if(o&&"string"!=typeof o&&"string"!=typeof n){if(o&&"object"==typeof o){if("object"==typeof n)for(let t in n)t in o||(e.style[t]="");else e.style.cssText="";for(let t in o)e.style[t]=o[t]||""}}else e.style.cssText=o||"";else if("o"===t[0]&&"n"===t[1]){let r=t!==(t=t.replace(/Capture$/,""));t=t.toLowerCase().substring(2),o?n||e.addEventListener(t,o,r):n&&e.removeEventListener(t,n,r)}else if("list"!==t&&"type"!==t&&t in e)try{e[t]=null==o?"":o}catch(n){null!=o&&!1!==o||"spellcheck"===t||e.removeAttribute(t)}else null==o||!1===o?e.removeAttribute(t):"function"!=typeof o&&e.setAttribute(t,o)}let f=!1,p=0;function h(e,t,n,o){let r=null;return p++||(f=e&&!e[i]),r=m(e,t,n,o),n&&r.parentNode!==n&&n.appendChild(r),--p||(f=!1),r}function m(e,t,n,o){let r=e;if(null!=t.nodeValue&&"boolean"!=typeof t.nodeValue||(t.nodeValue=""),"text"===t.nodeType)return e&&e.splitText&&e.parentNode&&(!e._component||o)?e.nodeValue!=t.nodeValue&&(e.nodeValue=t.nodeValue):(r=d.document.createTextNode(t.nodeValue),e&&(e.parentNode&&e.parentNode.replaceChild(r,e),y(e,!1))),r[i]={},r;let l=t.nodeName;if("function"==typeof l)return function(e,t,n){let o=e&&e._component,r=o&&o.constructor===t.nodeName,l=t.attributes,s=t.nodeName,d=e?Object.assign({},e[i]):{};if(r&&o){const r=_(o,l,t.childNodes);r&&(C(o,n),o.componentDidUpdate(d)),e=o.base}else y(e,!1),(o=new s(l,null)).children=t.childNodes,o.ref&&o.ref(o),C(o,n),e=o.base;return e}(e,t,n);if((!e||e.nodeName.toLowerCase()!==l.toLowerCase())&&(r=function(e){return d.document.createElement(e)}(l),e)){for(;e.firstChild;)r.appendChild(e.firstChild);e.parentNode&&e.parentNode.replaceChild(r,e),y(e,!1)}let s=r[i];s||(s=r[i]={},r.getAttributeNames().forEach(e=>s[e]=r.getAttribute(e)));let p=r.firstChild,h=t.childNodes;return(h.length||p)&&function(e,t,n){let o,r,l,s,d,u=e.childNodes,p=Array(),h={},b=0,N=0,v=u.length,g=0,C=t?t.length:0;if(0!==v)for(let e=0;e<v;e++){let t=u[e],n=t[i],o=C&&n?t._component?t._component.key:n.key:null;null!=o?(b++,h[o]=t):(n||(void 0!==t.splitText?!f||t.nodeValue.trim():f))&&(p[g++]=t)}if(0!==C)for(let i=0;i<C;i++){s=t[i],d=null;let y=s.key;if(null!=y)b&&void 0!==h[y]&&(d=h[y],h[y]=void 0,b--);else if(N<g)for(o=N;o<g;o++)if(void 0!==p[o]&&c(r=p[o],s,f)){d=r,p[o]=void 0,o===g-1&&g--,o===N&&N++;break}d=m(d,s,e,n),l=u[i],d&&d!==e&&d!==l&&(null==l?e.appendChild(d):d===l.nextSibling?a(l):e.insertBefore(d,l))}if(b)for(let e in h)void 0!==h[e]&&y(h[e],!1);for(;N<=g;)void 0!==(d=p[g--])&&y(d,!1)}(r,h,o),function(e,t,n){let o;for(o in n)t&&null!=t[o]||null==n[o]||u(e,o,n,n[o]=void 0);for(o in t)"children"!==o&&"innerHTML"!==o&&t[o]!==("value"===o||"checked"===o?e[o]:n[o])&&u(e,o,n[o],n[o]=t[o])}(r,t.attributes,s),r}function y(e,t){if(!e)return;let n=e._component;n&&w(n),e[i]&&e[i].ref&&e[i].ref(null),(!1===t||e[i])&&a(e),function(e){e=e.lastChild;for(;e;){let t=e.previousSibling;y(e,!0),e=t}}(e)}let b=Array(0);function N(e,t){return v(e,t,t.firstElementChild)}function v(e,t,n){return h(n,e,t,!0)}const g=Promise.resolve().then.bind(Promise.resolve());setTimeout,"undefined"!=typeof requestAnimationFrame&&requestAnimationFrame;function C(e,t){let n,o,r,l,s,d,a,c,u,f=e.base;if(!e.disabled)if((l=e.render())&&!Array.isArray(l)){if(e.parentNode=t,d=c=e.base,"function"==typeof l.nodeName){if(o=l.attributes,(a=e.child)&&a.constructor===l.nodeName){r=a.base?Object.assign({},a.base[i]):{},_(a,o,l.childNodes)&&(C(a,a.parentNode),a.componentDidUpdate(r))}else s=a,u=l.nodeName,!s&&d&&y(d,!1),e.child=a=new u(o,e),a.children=l.childNodes,a.ref&&a.ref(a),C(a,e.parentNode);c=a.base}"function"!=typeof l.nodeName&&((s=e.child)&&(d=e.child=null),c=h(d,l,e.parentNode,!0)),d&&c!==d&&a!==e.child&&(n=d.parentNode)&&c!==n&&(n.replaceChild(c,d),s||(c._component=null,y(d,!1))),s&&w(s),e.base=c,c&&!e.child&&(c._component=e),f||e.componentDidMount()}else e.base&&(y(e.base,!1),e.base=null)}function _(e,t,n){let o=!1;e.ref&&e.ref(e),e.children=n,e.disabled=!0;for(let n in t)void 0!==e[n]&&(e[n]!==t[n]&&(o=!0),e[n]=t[n]);return e.disabled=!1,o}function w(e){const t=e.base;e.disabled=!0,e.componentWillUnmount(),e.base=null,e.child&&w(e.child),e.parent=null,e.child=null,t&&(t._component=null,t[i]&&t[i].ref&&t[i].ref(null),y(t,!1)),e.ref&&e.ref(null)}d.document=document,window.h=r,window.Component=class{constructor(e,t,n){this.disabled=!1,this.key=e.key,this.ref=e.ref,this.asyncMethod=g,this.renderMode=n||s,this.child=null,this.base=null,this.parent=t,this.parentNode=null,this.children=[],delete e.ref,delete e.key,this.observe(e)}onChange(e,t,n){this.shouldComponentUpdate(e,t,n)&&(this.renderMode===s?C(this,this.parentNode):this.renderMode===l&&function(e){b.unshift(e),(e.asyncMethod||g)(()=>{let e,t=b;for(b=Array(0);e=t.pop();)C(e,e.parentNode)})}(this))}forceUpdate(){C(this,this.parentNode)}componentDidUpdate(e){}render(){}componentWillUnmount(){}componentDidMount(){}shouldComponentUpdate(e,t,n){return!0}observe(e){for(let t in e){let n=e[t];"function"!=typeof n?(Object.defineProperty(this,`$${t}`,{value:n,writable:!0,enumerable:!1}),Object.defineProperty(this,t,{enumerable:!0,get(){return this[`$${t}`]},set(e){const n=this[`$${t}`];this[`$${t}`]=e,this.disabled||n===e||this.onChange(t,e,n)}})):this[t]=n}}},window.Readapt={render:v,hydrate:N},window.React={createElement:r,render:v,hydrate:N}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,