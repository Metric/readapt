!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);class i{constructor(e,t,n){this.nodeName=e,this.nodeType=t,this.nodeValue=n,this.childNodes=Array(0)}}function o(e,t,...n){t=t||{};const o=Array(0);let r,l=new i(e,"function"==typeof e?"component":"element","");for(n.forEach(e=>o.unshift(e)),t&&null!=t.children&&(o.length||o.push(t.children),delete t.children);o.length;)r=o.pop(),Array.isArray(r)?r.forEach(e=>o.unshift(e)):r instanceof i?l.childNodes.push(r):l.childNodes.push(new i("#text","text",r));return l.attributes=t,l.key=t.key?t.key:void 0,l}const r="__readapt__",l=3,d=1,u={document:null};function c(e){const t=e.parentNode;t&&t.removeChild(e)}function s(e,t,n){return!!e&&("text"===t.nodeType?e.splitText:"string"==typeof t.nodeName?!e._component&&e.nodeName.toLowerCase()===t.nodeName.toLowerCase():n||e._component&&e._component.constructor===t.nodeName)}function f(e,t,n,i){if("className"===t&&(t="class"),"key"===t);else if("ref"===t)n&&n(null),i&&i(e);else if("html"===t)n!==i&&(e.innerHTML=i);else if("class"===t)if(i&&"string"!=typeof i){if(i&&"object"==typeof i){if("object"==typeof n)for(let t in n)t in i||e.classList.remove(t);for(let t in i)i[t]?e.classList.add(t):e.classList.remove(t)}}else e.className=i||"";else if("style"===t)if(i&&"string"!=typeof i&&"string"!=typeof n){if(i&&"object"==typeof i){if("object"==typeof n)for(let t in n)t in i||(e.style[t]="");else e.style.cssText="";for(let t in i)e.style[t]=i[t]||""}}else e.style.cssText=i||"";else if("o"===t[0]&&"n"===t[1]){let o=t!==(t=t.replace(/Capture$/,""));t=t.toLowerCase().substring(2),i?n||e.addEventListener(t,i,o):n&&e.removeEventListener(t,n,o)}else if("list"!==t&&"type"!==t&&t in e)try{e[t]=null==i?"":i}catch(n){null!=i&&!1!==i||"spellcheck"===t||e.removeAttribute(t)}else null==i||!1===i?e.removeAttribute(t):"function"!=typeof i&&e.setAttribute(t,i)}var a=function(e,t,n,i){return new(n||(n=Promise))(function(o,r){function l(e){try{u(i.next(e))}catch(e){r(e)}}function d(e){try{u(i.throw(e))}catch(e){r(e)}}function u(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(l,d)}u((i=i.apply(e,t||[])).next())})};let h=!1,p=0;function y(e,t,n,i){return a(this,void 0,void 0,function*(){let o=null;return p++||(h=e&&!e[r]),o=yield m(e,t,n,i),n&&o.parentNode!==n&&n.appendChild(o),--p||(h=!1),o})}function m(e,t,n,i){return a(this,void 0,void 0,function*(){let o=e;if(null!=t.nodeValue&&"boolean"!=typeof t.nodeValue||(t.nodeValue=""),"text"===t.nodeType)return e&&e.splitText&&e.parentNode&&(!e._component||i)?e.nodeValue!=t.nodeValue&&(e.nodeValue=t.nodeValue):(o=u.document.createTextNode(t.nodeValue),e&&(e.parentNode&&e.parentNode.replaceChild(o,e),yield v(e,!1))),o[r]={},o;let l=t.nodeName;if("function"==typeof l)return yield function(e,t,n){return g(this,void 0,void 0,function*(){let i=e&&e._component,o=i&&i.constructor===t.nodeName,r=t.attributes,l=t.nodeName;if(o&&i){const o=A(i,r,t.childNodes);o._different&&(yield x(i,n),yield i.componentDidUpdate(o)),e=i.base}else yield v(e,!1),(i=new l(r,null)).children=t.childNodes,i.ref&&i.ref(i),yield x(i,n),e=i.base;return e})}(e,t,n);if((!e||e.nodeName.toLowerCase()!==l.toLowerCase())&&(o=function(e){return u.document.createElement(e)}(l),e)){for(;e.firstChild;)o.appendChild(e.firstChild);e.parentNode&&e.parentNode.replaceChild(o,e),yield v(e,!1)}let d=o[r];d||(d=o[r]={},o.getAttributeNames().forEach(e=>d[e]=o.getAttribute(e)));let p=o.firstChild,y=t.childNodes;return(y&&y.length||p)&&(yield function(e,t,n){return a(this,void 0,void 0,function*(){let i,o,l,d,u,f=e.childNodes,a=Array(),p={},y=0,b=0,N=f.length,w=0,_=t?t.length:0;if(0!==N)for(let e=0;e<N;e++){let t=f[e],n=t[r],i=_&&n?t._component?t._component.key:n.key:null;null!=i?(y++,p[i]=t):(n||(void 0!==t.splitText?!h||t.nodeValue.trim():h))&&(a[w++]=t)}if(0!==_)for(let r=0;r<_;r++){d=t[r],u=null;let v=d.key;if(null!=v)y&&void 0!==p[v]&&(u=p[v],p[v]=void 0,y--);else if(b<w)for(i=b;i<w;i++)if(void 0!==a[i]&&s(o=a[i],d,h)){u=o,a[i]=void 0,i===w-1&&w--,i===b&&b++;break}u=yield m(u,d,e,n),l=f[r],u&&u!==e&&u!==l&&(null==l?e.appendChild(u):u===l.nextSibling?c(l):e.insertBefore(u,l))}if(y)for(let e in p)void 0!==p[e]&&(yield v(p[e],!1));for(;b<=w;)void 0!==(u=a[w--])&&(yield v(u,!1))})}(o,y,i)),function(e,t,n){let i;for(i in n)t&&null!=t[i]||null==n[i]||f(e,i,n,n[i]=void 0);for(i in t)"children"!==i&&"innerHTML"!==i&&t[i]!==("value"===i||"checked"===i?e[i]:n[i])&&f(e,i,n[i],n[i]=t[i])}(o,t.attributes,d),o})}function v(e,t){return a(this,void 0,void 0,function*(){if(!e)return;let n=e._component;n&&(yield T(n)),e[r]&&e[r].ref&&e[r].ref(null),(!1===t||e[r])&&c(e),yield function(e){return a(this,void 0,void 0,function*(){for(e=e.lastChild;e;){let t=e.previousSibling;yield v(e,!0),e=t}})}(e)})}var b=function(e,t,n,i){return new(n||(n=Promise))(function(o,r){function l(e){try{u(i.next(e))}catch(e){r(e)}}function d(e){try{u(i.throw(e))}catch(e){r(e)}}function u(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(l,d)}u((i=i.apply(e,t||[])).next())})};let N=Array(0);function w(e,t){return b(this,void 0,void 0,function*(){return yield _(e,t,t.firstElementChild)})}function _(e,t,n){return b(this,void 0,void 0,function*(){return yield y(n,e,t,!0)})}var g=function(e,t,n,i){return new(n||(n=Promise))(function(o,r){function l(e){try{u(i.next(e))}catch(e){r(e)}}function d(e){try{u(i.throw(e))}catch(e){r(e)}}function u(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(l,d)}u((i=i.apply(e,t||[])).next())})};const C=Promise.resolve().then.bind(Promise.resolve());setTimeout,"undefined"!=typeof requestAnimationFrame&&requestAnimationFrame;function x(e,t){return g(this,void 0,void 0,function*(){let n,i,o,r,l,d,u,c,s=e.base;if(!e.disabled){if(!(o=yield e.render())||Array.isArray(o))return e.child&&(yield T(e.child),e.child=null),void(e.base&&(e.base._component=null,yield v(e.base,!1),e.base=null));if(e.parentNode=t,l=u=e.base,"function"==typeof o.nodeName){if(i=o.attributes,(d=e.child)&&d.constructor===o.nodeName){const e=A(d,i,o.childNodes);e._different&&(yield x(d,d.parentNode),yield d.componentDidUpdate(e))}else r=d,c=o.nodeName,l&&!r&&(l._component=null,yield v(l,!1)),e.child=d=new c(i,e),d.children=o.childNodes,d.ref&&d.ref(d),yield x(d,e.parentNode);u=d.base}if("function"!=typeof o.nodeName&&((r=e.child)&&(l=e.child=null),u=yield y(l,o,e.parentNode,!0)),l&&u!==l&&d!==e.child&&(n=l.parentNode)&&u!==n&&(n.replaceChild(u,l),r||(l._component=null,yield v(l,!1))),r&&(yield T(r)),e.base=u,u&&!e.child){let t=e,n=e;for(;n=n.parent;)(t=n).base=u;u._component=t}s||(yield e.componentDidMount())}})}function A(e,t,n){let i={_different:!1};e.ref&&e.ref(e),e.children=n,e.disabled=!0;for(let n in t)void 0!==e[n]&&(e[n]!==t[n]&&(i[n]=e[n],i._different=!0),e[n]=t[n]);return e.disabled=!1,i}function T(e){return g(this,void 0,void 0,function*(){const t=e.base;e.disabled=!0,yield e.componentWillUnmount(),e.child&&(yield T(e.child)),e.base=null,e.parent=null,e.child=null,t&&(t._component=null,t[r]&&t[r].ref&&t[r].ref(null),yield v(t,!1)),e.ref&&e.ref(null)})}u.document=document,window.h=o,window.Component=class{constructor(e,t,n){this.disabled=!1,this.key=e.key,this.ref=e.ref,this.asyncMethod=C,this.renderMode=n||d,this.child=null,this.base=null,this.parent=t,this.parentNode=null,this.children=[],delete e.ref,delete e.key,this.observe(e)}componentChange(e,t,n){return g(this,void 0,void 0,function*(){this.shouldComponentUpdate(e,t,n)&&(this.renderMode===d?yield x(this,this.parentNode):this.renderMode===l&&function(e){N.unshift(e),(e.asyncMethod||C)(()=>b(this,void 0,void 0,function*(){let e,t=N;for(N=Array(0);e=t.pop();)yield x(e,e.parentNode)}))}(this))})}forceUpdate(){return g(this,void 0,void 0,function*(){yield x(this,this.parentNode)})}componentDidUpdate(e){return g(this,void 0,void 0,function*(){})}render(){return g(this,void 0,void 0,function*(){})}componentWillUnmount(){return g(this,void 0,void 0,function*(){})}componentDidMount(){return g(this,void 0,void 0,function*(){})}shouldComponentUpdate(e,t,n){return!0}observe(e){for(let t in e){let n=e[t];"function"!=typeof n?(Object.defineProperty(this,`$${t}`,{value:n,writable:!0,enumerable:!1}),Object.defineProperty(this,t,{enumerable:!0,get(){return this[`$${t}`]},set(e){const n=this[`$${t}`];this[`$${t}`]=e,this.disabled||n===e||this.componentChange(t,e,n)}})):this[t]=n}}},window.Readapt={render:_,hydrate:w},window.React={createElement:o,render:_,hydrate:w}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,