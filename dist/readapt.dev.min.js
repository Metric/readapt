!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);class i{constructor(e,t,n){this.nodeName=e,this.nodeType=t,this.nodeValue=n,this.childNodes=Array(0)}}function o(e,t,...n){t=t||{};const o=Array(0);let r,l=new i(e,"function"==typeof e?"component":"element","");for(n.forEach(e=>o.unshift(e)),t&&null!=t.children&&(o.length||o.push(t.children),delete t.children);o.length;)r=o.pop(),Array.isArray(r)?r.forEach(e=>o.unshift(e)):r instanceof i?l.childNodes.push(r):l.childNodes.push(new i("#text","text",r));return l.attributes=t,l.key=t.key?t.key:void 0,l}const r="__readapt__",l=3,d=1,u={document:null};function s(e){const t=e.parentNode;t&&t.removeChild(e)}function c(e,t,n){return!!e&&("text"===t.nodeType?e.splitText:"string"==typeof t.nodeName?!e._component&&e.nodeName.toLowerCase()===t.nodeName.toLowerCase():n||e._component&&e._component.constructor===t.nodeName)}function f(e,t,n,i){if("className"===t&&(t="class"),"key"===t);else if("ref"===t)n&&n(null),i&&i(e);else if("html"===t)n!==i&&(e.innerHTML=i);else if("class"===t)if(i&&"string"!=typeof i){if(i&&"object"==typeof i){if("object"==typeof n)for(let t in n)t in i||e.classList.remove(t);for(let t in i)i[t]?e.classList.add(t):e.classList.remove(t)}}else e.className=i||"";else if("style"===t)if(i&&"string"!=typeof i&&"string"!=typeof n){if(i&&"object"==typeof i){if("object"==typeof n)for(let t in n)t in i||(e.style[t]="");else e.style.cssText="";for(let t in i)e.style[t]=i[t]||""}}else e.style.cssText=i||"";else if("o"===t[0]&&"n"===t[1]){let o=t!==(t=t.replace(/Capture$/,""));t=t.toLowerCase().substring(2),i?n||e.addEventListener(t,i,o):n&&e.removeEventListener(t,n,o)}else if("list"!==t&&"type"!==t&&t in e)try{e[t]=null==i?"":i}catch(n){null!=i&&!1!==i||"spellcheck"===t||e.removeAttribute(t)}else null==i||!1===i?e.removeAttribute(t):"function"!=typeof i&&e.setAttribute(t,i)}var a=function(e,t,n,i){return new(n||(n=Promise))(function(o,r){function l(e){try{u(i.next(e))}catch(e){r(e)}}function d(e){try{u(i.throw(e))}catch(e){r(e)}}function u(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(l,d)}u((i=i.apply(e,t||[])).next())})};let h=!1,p=0;function y(e,t,n,i,o){return a(this,void 0,void 0,function*(){let l=null;return p++||(h=e&&!e[r]),l=yield m(e,t,n,i,o),i&&l.parentNode!==i&&i.appendChild(l),--p||(h=!1),l})}function m(e,t,n,i,o){return a(this,void 0,void 0,function*(){let l=e;if(null!=t.nodeValue&&"boolean"!=typeof t.nodeValue||(t.nodeValue=""),"text"===t.nodeType)return e&&e.splitText&&e.parentNode&&(!e._component||o)?e.nodeValue!=t.nodeValue&&(e.nodeValue=t.nodeValue):(l=u.document.createTextNode(t.nodeValue),e&&(e.parentNode&&e.parentNode.replaceChild(l,e),yield v(e,!1))),l[r]={},l;let d=t.nodeName;if("function"==typeof d)return yield function(e,t,n,i){return g(this,void 0,void 0,function*(){let o=e&&e._component,r=o&&o.constructor===t.nodeName,l=t.attributes,d=t.nodeName;if(r&&o){const r=A(o,l,t.childNodes);r._different&&(yield x(o,n,i),yield o.componentDidUpdate(r)),e=o.base}else yield v(e,!1),(o=new d(l,null)).children=t.childNodes,o.ref&&o.ref(o),yield x(o,n,i),e=o.base;return e})}(e,t,n,i);if((!e||e.nodeName.toLowerCase()!==d.toLowerCase())&&(l=function(e){return u.document.createElement(e)}(d),e)){for(;e.firstChild;)l.appendChild(e.firstChild);e.parentNode&&e.parentNode.replaceChild(l,e),yield v(e,!1)}let p=l[r];p||(p=l[r]={},l.getAttributeNames().forEach(e=>p[e]=l.getAttribute(e)));let y=l.firstChild,b=t.childNodes;return(b&&b.length||y)&&(yield function(e,t,n,i){return a(this,void 0,void 0,function*(){let o,l,d,u,f,a=e.childNodes,p=Array(),y={},b=0,N=0,w=a.length,_=0,g=t?t.length:0;if(0!==w)for(let e=0;e<w;e++){let t=a[e],n=t[r],i=g&&n?t._component?t._component.key:n.key:null;null!=i?(b++,y[i]=t):(n||(void 0!==t.splitText?!h||t.nodeValue.trim():h))&&(p[_++]=t)}if(0!==g)for(let r=0;r<g;r++){u=t[r],f=null;let v=u.key;if(null!=v)b&&void 0!==y[v]&&(f=y[v],y[v]=void 0,b--);else if(N<_)for(o=N;o<_;o++)if(void 0!==p[o]&&c(l=p[o],u,h)){f=l,p[o]=void 0,o===_-1&&_--,o===N&&N++;break}f=yield m(f,u,n,e,i),d=a[r],f&&f!==e&&f!==d&&(null==d?e.appendChild(f):f===d.nextSibling?s(d):e.insertBefore(f,d))}if(b)for(let e in y)void 0!==y[e]&&(yield v(y[e],!1));for(;N<=_;)void 0!==(f=p[_--])&&(yield v(f,!1))})}(l,b,n,o)),function(e,t,n){let i;for(i in n)t&&null!=t[i]||null==n[i]||f(e,i,n,n[i]=void 0);for(i in t)"children"!==i&&"innerHTML"!==i&&t[i]!==("value"===i||"checked"===i?e[i]:n[i])&&f(e,i,n[i],n[i]=t[i])}(l,t.attributes,p),l})}function v(e,t){return a(this,void 0,void 0,function*(){if(!e)return;let n=e._component;n&&(yield T(n)),e[r]&&e[r].ref&&e[r].ref(null),(!1===t||e[r])&&s(e),yield function(e){return a(this,void 0,void 0,function*(){for(e=e.lastChild;e;){let t=e.previousSibling;yield v(e,!0),e=t}})}(e)})}var b=function(e,t,n,i){return new(n||(n=Promise))(function(o,r){function l(e){try{u(i.next(e))}catch(e){r(e)}}function d(e){try{u(i.throw(e))}catch(e){r(e)}}function u(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(l,d)}u((i=i.apply(e,t||[])).next())})};let N=Array(0);function w(e,t){return b(this,void 0,void 0,function*(){return yield _(e,t,t.firstElementChild)})}function _(e,t,n){return b(this,void 0,void 0,function*(){return yield y(n,e,null,t,!0)})}var g=function(e,t,n,i){return new(n||(n=Promise))(function(o,r){function l(e){try{u(i.next(e))}catch(e){r(e)}}function d(e){try{u(i.throw(e))}catch(e){r(e)}}function u(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(l,d)}u((i=i.apply(e,t||[])).next())})};const C=Promise.resolve().then.bind(Promise.resolve());setTimeout,"undefined"!=typeof requestAnimationFrame&&requestAnimationFrame;function x(e,t,n){return g(this,void 0,void 0,function*(){let t,i,o,r,l,d,u,s,c,f=e.base;if(!e.disabled)if((r=yield e.render())&&!Array.isArray(r)){if(e.parentNode=n,o=d=s=e.base,"function"==typeof r.nodeName){if(i=r.attributes,(u=e.child)&&u.constructor===r.nodeName){const t=A(u,i,r.childNodes);t._different&&(yield x(u,e,u.parentNode),yield u.componentDidUpdate(t))}else l=u,c=r.nodeName,!l&&d&&(yield v(d,!1)),e.child=u=new c(i,e),u.children=r.childNodes,u.ref&&u.ref(u),yield x(u,e,e.parentNode);s=u.base}if("function"!=typeof r.nodeName&&((l=e.child)&&(d=e.child=null),s=yield y(d,r,e,e.parentNode,!0)),d&&s!==d&&u!==e.child&&(t=d.parentNode)&&s!==t&&(t.replaceChild(s,d),l||(s._component=null,yield v(d,!1))),l&&(yield T(l)),e.base=s,s&&!e.child){let t=e,n=e;for(;n=n.parent;)(t=n).base=s;s._component=t}f||(yield e.componentDidMount())}else e.base&&(yield v(e.base,!1),e.base=null)})}function A(e,t,n){let i={_different:!1};e.ref&&e.ref(e),e.children=n,e.disabled=!0;for(let n in t)void 0!==e[n]&&(e[n]!==t[n]&&(i[n]=e[n],i._different=!0),e[n]=t[n]);return e.disabled=!1,i}function T(e){return g(this,void 0,void 0,function*(){const t=e.base;e.disabled=!0,yield e.componentWillUnmount(),e.child&&(yield T(e.child)),e.base=null,e.parent=null,e.child=null,t&&(t._component=null,t[r]&&t[r].ref&&t[r].ref(null),yield v(t,!1)),e.ref&&e.ref(null)})}u.document=document,window.h=o,window.Component=class{constructor(e,t,n){this.disabled=!1,this.key=e.key,this.ref=e.ref,this.asyncMethod=C,this.renderMode=n||d,this.child=null,this.base=null,this.parent=t,this.parentNode=null,this.children=[],delete e.ref,delete e.key,this.observe(e)}componentChange(e,t,n){return g(this,void 0,void 0,function*(){this.shouldComponentUpdate(e,t,n)&&(this.renderMode===d?yield x(this,this.parent,this.parentNode):this.renderMode===l&&function(e){N.unshift(e),(e.asyncMethod||C)(()=>b(this,void 0,void 0,function*(){let e,t=N;for(N=Array(0);e=t.pop();)yield x(e,e.parent,e.parentNode)}))}(this))})}forceUpdate(){return g(this,void 0,void 0,function*(){yield x(this,this.parent,this.parentNode)})}componentDidUpdate(e){return g(this,void 0,void 0,function*(){})}render(){return g(this,void 0,void 0,function*(){})}componentWillUnmount(){return g(this,void 0,void 0,function*(){})}componentDidMount(){return g(this,void 0,void 0,function*(){})}shouldComponentUpdate(e,t,n){return!0}observe(e){for(let t in e){let n=e[t];"function"!=typeof n?(Object.defineProperty(this,`$${t}`,{value:n,writable:!0,enumerable:!1}),Object.defineProperty(this,t,{enumerable:!0,get(){return this[`$${t}`]},set(e){const n=this[`$${t}`];this[`$${t}`]=e,this.disabled||n===e||this.componentChange(t,e,n)}})):this[t]=n}}},window.Readapt={render:_,hydrate:w},window.React={createElement:o,render:_,hydrate:w}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,