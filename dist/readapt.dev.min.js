/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/client.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/client.js":
/*!***********************!*\
  !*** ./src/client.js ***!
  \***********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _h__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./h */ "./src/h.ts");
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./component */ "./src/component.ts");
/* harmony import */ var _readapt_dom_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./readapt-dom/index */ "./src/readapt-dom/index.ts");
/* harmony import */ var _render__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./render */ "./src/render.ts");





_readapt_dom_index__WEBPACK_IMPORTED_MODULE_2__["DOM"].document = document;
window.h = _h__WEBPACK_IMPORTED_MODULE_0__["h"];
window.Component = _component__WEBPACK_IMPORTED_MODULE_1__["default"];
window.Readapt = {
    render: _render__WEBPACK_IMPORTED_MODULE_3__["render"],
    hydrate: _render__WEBPACK_IMPORTED_MODULE_3__["hydrate"]
};
window.React = {
    createElement: _h__WEBPACK_IMPORTED_MODULE_0__["h"],
    render: _render__WEBPACK_IMPORTED_MODULE_3__["render"],
    hydrate: _render__WEBPACK_IMPORTED_MODULE_3__["hydrate"]
};


/***/ }),

/***/ "./src/component.ts":
/*!**************************!*\
  !*** ./src/component.ts ***!
  \**************************/
/*! exports provided: DEFER_PROMISE, DEFER_TIMEOUT, DEFER_ANIMATION, default, renderComponent, prepareRender, unmountComponent, buildComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFER_PROMISE", function() { return DEFER_PROMISE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFER_TIMEOUT", function() { return DEFER_TIMEOUT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFER_ANIMATION", function() { return DEFER_ANIMATION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Component; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderComponent", function() { return renderComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prepareRender", function() { return prepareRender; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unmountComponent", function() { return unmountComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildComponent", function() { return buildComponent; });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./src/constants.ts");
/* harmony import */ var _readapt_vdom_diff__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./readapt-vdom/diff */ "./src/readapt-vdom/diff.ts");
/* harmony import */ var _render__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./render */ "./src/render.ts");

var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



const DEFER_PROMISE = Promise.resolve().then.bind(Promise.resolve());
const DEFER_TIMEOUT = setTimeout;
const DEFER_ANIMATION = typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame : DEFER_PROMISE;
class Component {
    constructor(props, parent, renderMode) {
        this.disabled = false;
        this.key = props.key;
        this.ref = props.ref;
        this.asyncMethod = DEFER_PROMISE;
        this.renderMode = renderMode || _constants__WEBPACK_IMPORTED_MODULE_0__["SYNC"];
        this.child = null;
        this.base = null;
        this.parent = parent;
        this.parentNode = null;
        this.children = [];
        this.state = {};
        this.__props = props;
        delete props.ref;
        delete props.key;
        this.observe(props);
    }
    componentChange(key, value, previous) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.shouldComponentUpdate(key, value, previous)) {
                if (this.renderMode === _constants__WEBPACK_IMPORTED_MODULE_0__["SYNC"])
                    yield renderComponent(this, this.parentNode, false);
                else if (this.renderMode === _constants__WEBPACK_IMPORTED_MODULE_0__["ASYNC"])
                    Object(_render__WEBPACK_IMPORTED_MODULE_2__["enqueue"])(this);
            }
        });
    }
    forceUpdate() {
        return __awaiter(this, void 0, void 0, function* () {
            yield renderComponent(this, this.parentNode, false);
        });
    }
    componentDidUpdate(previous) {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    render() {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    componentWillUnmount() {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    componentDidMount() {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    setState(sm) {
        return __awaiter(this, void 0, void 0, function* () {
            const update = new Promise((r, rj) => __awaiter(this, void 0, void 0, function* () {
                //immutable from original state
                const oldState = Object(_constants__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, this.state);
                const finalState = Object(_constants__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, this.state);
                let newState = {};
                if (typeof sm === 'function') {
                    //copy current props for immutable
                    const props = {};
                    if (this.__props) {
                        for (let k in this.__props)
                            props[k] = this[k];
                    }
                    //immutable from original state
                    newState = sm(Object(_constants__WEBPACK_IMPORTED_MODULE_0__["extend"])(newState, this.state), props) || newState;
                    Object(_constants__WEBPACK_IMPORTED_MODULE_0__["extend"])(finalState, newState);
                }
                else if (typeof sm === 'object')
                    Object(_constants__WEBPACK_IMPORTED_MODULE_0__["extend"])(finalState, sm);
                this.state = finalState;
                for (let k in finalState) {
                    if (oldState[k] !== finalState[k])
                        yield this.componentChange(k, newState[k], oldState[k]);
                }
                r();
            }));
            if (this.renderMode === _constants__WEBPACK_IMPORTED_MODULE_0__["SYNC"])
                yield update;
            else if (this.renderMode === _constants__WEBPACK_IMPORTED_MODULE_0__["ASYNC"])
                Object(_render__WEBPACK_IMPORTED_MODULE_2__["enqueueState"])(this, update);
        });
    }
    shouldComponentUpdate(key, value, previous) {
        return true;
    }
    observe(o) {
        for (let k in o) {
            let v = o[k];
            if (typeof v === 'function') {
                this[k] = v;
                continue;
            }
            Object.defineProperty(this, `\$${k}`, { value: v, writable: true, enumerable: false });
            Object.defineProperty(this, k, {
                enumerable: true,
                get() {
                    return this[`\$${k}`];
                },
                set(nv) {
                    const prev = this[`\$${k}`];
                    this[`\$${k}`] = nv;
                    if (!this.disabled && prev !== nv) {
                        this.componentChange(k, nv, prev);
                    }
                }
            });
        }
    }
}
function renderComponent(component, parentNode, hydrating) {
    return __awaiter(this, void 0, void 0, function* () {
        let isUpdate = component.base, p, props, rendered, toUnmount, cbase, inst, base, type;
        if (component.disabled)
            return;
        rendered = yield component.render();
        if (!rendered || Array.isArray(rendered)) {
            if (component.child) {
                yield unmountComponent(component.child);
                component.child = null;
            }
            if (component.base) {
                component.base._component = null;
                yield Object(_readapt_vdom_diff__WEBPACK_IMPORTED_MODULE_1__["recollectNodeTree"])(component.base, false);
                component.base = null;
            }
            return;
        }
        component.parentNode = parentNode;
        cbase = base = component.base;
        if (typeof rendered.nodeName === 'function') {
            props = rendered.attributes;
            inst = component.child;
            if (inst && inst.constructor === rendered.nodeName) {
                const update = prepareRender(inst, props, rendered.childNodes);
                if (update._different) {
                    yield renderComponent(inst, inst.parentNode, hydrating);
                    yield inst.componentDidUpdate(update);
                }
            }
            else {
                toUnmount = inst;
                type = rendered.nodeName;
                if (cbase && !toUnmount && !hydrating) {
                    cbase._component = null;
                    yield Object(_readapt_vdom_diff__WEBPACK_IMPORTED_MODULE_1__["recollectNodeTree"])(cbase, false);
                }
                component.child = inst = new type(props, component);
                if (hydrating)
                    inst.base = cbase;
                inst.children = rendered.childNodes;
                if (inst.ref)
                    inst.ref(inst);
                yield renderComponent(inst, component.parentNode, hydrating);
            }
            base = inst.base;
        }
        if (typeof rendered.nodeName !== 'function') {
            toUnmount = component.child;
            if (toUnmount)
                cbase = component.child = null;
            base = yield Object(_readapt_vdom_diff__WEBPACK_IMPORTED_MODULE_1__["diff"])(cbase, rendered, component.parentNode, true);
        }
        if (cbase && base !== cbase && inst !== component.child) {
            p = cbase.parentNode;
            if (p && base !== p) {
                p.replaceChild(base, cbase);
                if (!toUnmount) {
                    cbase._component = null;
                    yield Object(_readapt_vdom_diff__WEBPACK_IMPORTED_MODULE_1__["recollectNodeTree"])(cbase, false);
                }
            }
        }
        if (toUnmount)
            yield unmountComponent(toUnmount);
        component.base = base;
        if (base && !component.child) {
            let cmp = component, t = component;
            while ((t = t.parent)) {
                (cmp = t).base = base;
            }
            base._component = cmp;
        }
        if (!isUpdate) {
            yield component.componentDidMount();
        }
    });
}
function prepareRender(inst, props, children) {
    let diff = { _different: false };
    if (inst.ref)
        inst.ref(inst);
    inst.children = children;
    inst.disabled = true;
    for (let n in props) {
        if (inst[n] !== props[n]) {
            diff[n] = inst[n];
            diff._different = true;
        }
        inst[n] = props[n];
    }
    inst.disabled = false;
    return diff;
}
function unmountComponent(component) {
    return __awaiter(this, void 0, void 0, function* () {
        const base = component.base;
        component.disabled = true;
        yield component.componentWillUnmount();
        if (component.child)
            yield unmountComponent(component.child);
        component.base = null;
        component.parent = null;
        component.child = null;
        if (base) {
            base._component = null;
            if (base[_constants__WEBPACK_IMPORTED_MODULE_0__["ATTR_KEY"]] && base[_constants__WEBPACK_IMPORTED_MODULE_0__["ATTR_KEY"]].ref)
                base[_constants__WEBPACK_IMPORTED_MODULE_0__["ATTR_KEY"]].ref(null);
            yield Object(_readapt_vdom_diff__WEBPACK_IMPORTED_MODULE_1__["recollectNodeTree"])(base, false);
        }
        if (component.ref)
            component.ref(null);
    });
}
function buildComponent(dom, node, parentNode, hydrating) {
    return __awaiter(this, void 0, void 0, function* () {
        let c = dom && dom._component, isDirectOwner = c && c.constructor === node.nodeName, props = node.attributes, type = node.nodeName;
        if (isDirectOwner && c) {
            const update = prepareRender(c, props, node.childNodes);
            if (update._different) {
                yield renderComponent(c, parentNode, hydrating);
                yield c.componentDidUpdate(update);
            }
            dom = c.base;
        }
        else {
            if (!hydrating)
                yield Object(_readapt_vdom_diff__WEBPACK_IMPORTED_MODULE_1__["recollectNodeTree"])(dom, false);
            c = new type(props, null);
            c.children = node.childNodes;
            if (hydrating)
                c.base = dom;
            if (c.ref)
                c.ref(c);
            yield renderComponent(c, parentNode, hydrating);
            dom = c.base;
        }
        return dom;
    });
}


/***/ }),

/***/ "./src/constants.ts":
/*!**************************!*\
  !*** ./src/constants.ts ***!
  \**************************/
/*! exports provided: ATTR_KEY, ASYNC, SYNC, NONE, FORCE, extend */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ATTR_KEY", function() { return ATTR_KEY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ASYNC", function() { return ASYNC; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SYNC", function() { return SYNC; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NONE", function() { return NONE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FORCE", function() { return FORCE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extend", function() { return extend; });

const ATTR_KEY = '__readapt__';
const ASYNC = 3;
const SYNC = 1;
const NONE = 0;
const FORCE = 2;
function extend(base, ref) {
    for (let k in ref)
        base[k] = ref[k];
    return base;
}
;


/***/ }),

/***/ "./src/h.ts":
/*!******************!*\
  !*** ./src/h.ts ***!
  \******************/
/*! exports provided: h */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return h; });
/* harmony import */ var _readapt_vdom_vnode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./readapt-vdom/vnode */ "./src/readapt-vdom/vnode.ts");


function h(nodeName, attributes, ...children) {
    attributes = attributes || {};
    const stack = Array(0);
    let child, p = new _readapt_vdom_vnode__WEBPACK_IMPORTED_MODULE_0__["default"](nodeName, typeof nodeName === 'function' ? 'component' : 'element', '');
    children.forEach(c => stack.unshift(c));
    if (attributes && attributes.children != null) {
        if (!stack.length)
            stack.push(attributes.children);
        delete attributes.children;
    }
    while (stack.length) {
        child = stack.pop();
        if (Array.isArray(child))
            child.forEach(c => stack.unshift(c));
        else {
            if (child instanceof _readapt_vdom_vnode__WEBPACK_IMPORTED_MODULE_0__["default"])
                p.childNodes.push(child);
            else
                p.childNodes.push(new _readapt_vdom_vnode__WEBPACK_IMPORTED_MODULE_0__["default"]('#text', 'text', child));
        }
    }
    p.attributes = attributes;
    p.key = attributes.key ? attributes.key : undefined;
    return p;
}
;


/***/ }),

/***/ "./src/readapt-dom/index.ts":
/*!**********************************!*\
  !*** ./src/readapt-dom/index.ts ***!
  \**********************************/
/*! exports provided: DOM, createNode, removeNode, isSameNodeType, setAccessor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOM", function() { return DOM; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createNode", function() { return createNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeNode", function() { return removeNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSameNodeType", function() { return isSameNodeType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setAccessor", function() { return setAccessor; });

const DOM = {
    document: null
};
function createNode(nodeName) {
    return DOM.document.createElement(nodeName);
}
function removeNode(node) {
    const parentNode = node.parentNode;
    if (parentNode)
        parentNode.removeChild(node);
}
function isSameNodeType(node, vnode, hydrating) {
    if (!node)
        return false;
    if (vnode.nodeType === 'text')
        return node.splitText;
    if (typeof vnode.nodeName === 'string')
        return !node._component && node.nodeName.toLowerCase() === vnode.nodeName.toLowerCase();
    return hydrating || (node._component && node._component.constructor === vnode.nodeName);
}
function setAccessor(node, name, old, value) {
    if (name === 'className')
        name = 'class';
    if (name === '__html')
        name = 'html';
    if (name === 'key') {
        //do nothing
    }
    else if (name === 'ref') {
        if (old && typeof (old) === 'function')
            old(null);
        if (value && typeof (value) === 'function')
            value(node);
    }
    //please for the love of god
    //never use this unless you really have to
    //for showing mark down or something similar
    else if (name === 'html') {
        if (old !== value) {
            node.innerHTML = value;
        }
    }
    else if (name === 'class') {
        if (!value || typeof value === 'string') {
            node.className = value || '';
        }
        else if (value && typeof value === 'object') {
            if (typeof old === 'object') {
                for (let i in old) {
                    if (!(i in value))
                        node.classList.remove(i);
                }
            }
            for (let i in value) {
                if (value[i])
                    node.classList.add(i);
                else
                    node.classList.remove(i);
            }
        }
    }
    else if (name === 'style') {
        if (value && typeof value === 'object') {
            if (typeof old === 'object') {
                for (let i in old) {
                    if (!(i in value))
                        node.style[i] = '';
                }
            }
            else
                node.style.cssText = '';
            for (let i in value)
                node.style[i] = value[i] || '';
        }
        else if (!value || typeof value === 'string' || typeof old === 'string') {
            node.style.cssText = value || '';
        }
    }
    else if (name[0] === 'o' && name[1] === 'n') {
        let useCapture = name !== (name = name.replace(/Capture$/, ''));
        name = name.toLowerCase().substring(2);
        if (value) {
            if (!old)
                node.addEventListener(name, value, useCapture);
        }
        else if (old)
            node.removeEventListener(name, old, useCapture);
    }
    else if (name !== 'list' && name !== 'type' && name in node) {
        try {
            node[name] = value == null ? '' : value;
        }
        catch (e) {
            if ((value == null || value === false) && name !== 'spellcheck')
                node.removeAttribute(name);
        }
    }
    else {
        if (value == null || value === false)
            node.removeAttribute(name);
        else if (typeof value !== 'function')
            node.setAttribute(name, value);
    }
}


/***/ }),

/***/ "./src/readapt-vdom/diff.ts":
/*!**********************************!*\
  !*** ./src/readapt-vdom/diff.ts ***!
  \**********************************/
/*! exports provided: inputs, hydrating, diffLevel, diff, recollectNodeTree, removeChildren */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inputs", function() { return inputs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hydrating", function() { return hydrating; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "diffLevel", function() { return diffLevel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "diff", function() { return diff; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "recollectNodeTree", function() { return recollectNodeTree; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeChildren", function() { return removeChildren; });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../component */ "./src/component.ts");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _readapt_dom_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../readapt-dom/index */ "./src/readapt-dom/index.ts");

var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





const inputs = [
    'input',
    'textarea',
    'select',
    'meter',
    'progress',
    'button'
];
let hydrating = false;
let diffLevel = 0;
function diff(dom, node, parent, root) {
    return __awaiter(this, void 0, void 0, function* () {
        let ret = null;
        if (!diffLevel++)
            hydrating = dom && !dom[_constants__WEBPACK_IMPORTED_MODULE_1__["ATTR_KEY"]];
        ret = yield idiff(dom, node, parent, root);
        if (parent && ret.parentNode !== parent)
            parent.appendChild(ret);
        if (!--diffLevel) {
            hydrating = false;
        }
        return ret;
    });
}
function idiff(dom, node, parent, root) {
    return __awaiter(this, void 0, void 0, function* () {
        let out = dom;
        if (node.nodeValue == null || typeof node.nodeValue === 'boolean')
            node.nodeValue = '';
        if (node.nodeType === 'text') {
            if (dom && dom.splitText && dom.parentNode && (!dom._component || root)) {
                if (dom.nodeValue != node.nodeValue)
                    dom.nodeValue = node.nodeValue;
            }
            else {
                out = _readapt_dom_index__WEBPACK_IMPORTED_MODULE_2__["DOM"].document.createTextNode(node.nodeValue);
                if (dom) {
                    if (dom.parentNode)
                        dom.parentNode.replaceChild(out, dom);
                    yield recollectNodeTree(dom, false);
                }
            }
            out[_constants__WEBPACK_IMPORTED_MODULE_1__["ATTR_KEY"]] = {};
            return out;
        }
        let nodeName = node.nodeName, nroot;
        if (typeof nodeName === 'function')
            return yield Object(_component__WEBPACK_IMPORTED_MODULE_0__["buildComponent"])(dom, node, parent, hydrating);
        if (!dom || dom.nodeName.toLowerCase() !== nodeName.toLowerCase()) {
            out = Object(_readapt_dom_index__WEBPACK_IMPORTED_MODULE_2__["createNode"])(nodeName);
            if (dom) {
                while (dom.firstChild)
                    out.appendChild(dom.firstChild);
                if (dom.parentNode)
                    dom.parentNode.replaceChild(out, dom);
                //recollect
                yield recollectNodeTree(dom, false);
            }
        }
        let props = out[_constants__WEBPACK_IMPORTED_MODULE_1__["ATTR_KEY"]];
        if (!props) {
            props = out[_constants__WEBPACK_IMPORTED_MODULE_1__["ATTR_KEY"]] = {};
            out.getAttributeNames().forEach(n => props[n] = out.getAttribute(n));
        }
        let fc = out.firstChild, children = node.childNodes;
        if ((children && children.length) || fc)
            yield innerDiffNode(out, children, root);
        diffAttributes(out, node.attributes, props);
        return out;
    });
}
function innerDiffNode(dom, vchildren, root) {
    return __awaiter(this, void 0, void 0, function* () {
        let originalChildren = dom.childNodes, children = Array(), keyed = {}, keyedLen = 0, min = 0, len = originalChildren.length, childrenLen = 0, vlen = vchildren ? vchildren.length : 0, j, c, f, vchild, child;
        // Build up a map of keyed children and an Array of unkeyed children:
        if (len !== 0) {
            for (let i = 0; i < len; i++) {
                let child = originalChildren[i], props = child[_constants__WEBPACK_IMPORTED_MODULE_1__["ATTR_KEY"]], key = vlen && props ? child._component ? child._component.key : props.key : null;
                if (key != null) {
                    keyedLen++;
                    keyed[key] = child;
                }
                else if (props || (child.splitText !== undefined ? (hydrating ? child.nodeValue.trim() : true) : hydrating)) {
                    children[childrenLen++] = child;
                }
            }
        }
        if (vlen !== 0) {
            for (let i = 0; i < vlen; i++) {
                vchild = vchildren[i];
                child = null;
                // attempt to find a node based on key matching
                let key = vchild.key;
                if (key != null) {
                    if (keyedLen && keyed[key] !== undefined) {
                        child = keyed[key];
                        keyed[key] = undefined;
                        keyedLen--;
                    }
                }
                // attempt to pluck a node of the same type from the existing children
                else if (min < childrenLen) {
                    for (j = min; j < childrenLen; j++) {
                        if (children[j] !== undefined && Object(_readapt_dom_index__WEBPACK_IMPORTED_MODULE_2__["isSameNodeType"])(c = children[j], vchild, hydrating)) {
                            child = c;
                            children[j] = undefined;
                            if (j === childrenLen - 1)
                                childrenLen--;
                            if (j === min)
                                min++;
                            break;
                        }
                    }
                }
                // morph the matched/found/created DOM child to match vchild (deep)
                child = yield idiff(child, vchild, dom, root);
                f = originalChildren[i];
                if (child && child !== dom && child !== f) {
                    if (f == null) {
                        dom.appendChild(child);
                    }
                    else {
                        dom.insertBefore(child, f);
                        Object(_readapt_dom_index__WEBPACK_IMPORTED_MODULE_2__["removeNode"])(f);
                    }
                }
            }
        }
        // remove unused keyed children:
        if (keyedLen) {
            for (let i in keyed)
                if (keyed[i] !== undefined)
                    yield recollectNodeTree(keyed[i], false);
        }
        // remove orphaned unkeyed children:
        while (min <= childrenLen) {
            if ((child = children[childrenLen--]) !== undefined)
                yield recollectNodeTree(child, false);
        }
    });
}
function recollectNodeTree(node, unmountOnly) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!node)
            return;
        let component = node._component;
        if (component)
            yield Object(_component__WEBPACK_IMPORTED_MODULE_0__["unmountComponent"])(component);
        if (node[_constants__WEBPACK_IMPORTED_MODULE_1__["ATTR_KEY"]] && node[_constants__WEBPACK_IMPORTED_MODULE_1__["ATTR_KEY"]].ref)
            node[_constants__WEBPACK_IMPORTED_MODULE_1__["ATTR_KEY"]].ref(null);
        if (unmountOnly === false || node[_constants__WEBPACK_IMPORTED_MODULE_1__["ATTR_KEY"]])
            Object(_readapt_dom_index__WEBPACK_IMPORTED_MODULE_2__["removeNode"])(node);
        yield removeChildren(node);
    });
}
function removeChildren(node) {
    return __awaiter(this, void 0, void 0, function* () {
        node = node.lastChild;
        while (node) {
            let next = node.previousSibling;
            yield recollectNodeTree(node, true);
            node = next;
        }
    });
}
function diffAttributes(dom, attrs, old) {
    let name;
    for (name in old) {
        if (!(attrs && attrs[name] != null) && old[name] != null)
            Object(_readapt_dom_index__WEBPACK_IMPORTED_MODULE_2__["setAccessor"])(dom, name, old[name], old[name] = undefined);
    }
    for (name in attrs) {
        if (name !== 'children' && name !== 'innerHTML'
            && (attrs[name] !== ((name === 'value' || name === 'checked') ? dom[name] : old[name])))
            Object(_readapt_dom_index__WEBPACK_IMPORTED_MODULE_2__["setAccessor"])(dom, name, old[name], old[name] = attrs[name]);
    }
}


/***/ }),

/***/ "./src/readapt-vdom/vnode.ts":
/*!***********************************!*\
  !*** ./src/readapt-vdom/vnode.ts ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return VNode; });

class VNode {
    constructor(name, type, v) {
        this.nodeName = name;
        this.nodeType = type;
        this.nodeValue = v;
        this.childNodes = Array(0);
    }
}


/***/ }),

/***/ "./src/render.ts":
/*!***********************!*\
  !*** ./src/render.ts ***!
  \***********************/
/*! exports provided: enqueue, enqueueState, hydrate, render */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enqueue", function() { return enqueue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enqueueState", function() { return enqueueState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hydrate", function() { return hydrate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./src/component.ts");
/* harmony import */ var _readapt_vdom_diff__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./readapt-vdom/diff */ "./src/readapt-vdom/diff.ts");

var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


function enqueue(component) {
    (component.asyncMethod || _component__WEBPACK_IMPORTED_MODULE_0__["DEFER_PROMISE"])(() => __awaiter(this, void 0, void 0, function* () {
        yield Object(_component__WEBPACK_IMPORTED_MODULE_0__["renderComponent"])(component, component.parentNode, false);
    }));
}
function enqueueState(component, state) {
    (component.asyncMethod || _component__WEBPACK_IMPORTED_MODULE_0__["DEFER_PROMISE"])(() => __awaiter(this, void 0, void 0, function* () {
        yield state;
    }));
}
function hydrate(node, parent) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield render(node, parent, parent.firstElementChild);
    });
}
function render(node, parent, merge) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield Object(_readapt_vdom_diff__WEBPACK_IMPORTED_MODULE_1__["diff"])(merge, node, parent, true);
    });
}


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NsaWVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50LnRzIiwid2VicGFjazovLy8uL3NyYy9jb25zdGFudHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2gudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWRhcHQtZG9tL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9yZWFkYXB0LXZkb20vZGlmZi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVhZGFwdC12ZG9tL3Zub2RlLnRzIiwid2VicGFjazovLy8uL3NyYy9yZW5kZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtRQUFBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBOzs7UUFHQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0EsMENBQTBDLGdDQUFnQztRQUMxRTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLHdEQUF3RCxrQkFBa0I7UUFDMUU7UUFDQSxpREFBaUQsY0FBYztRQUMvRDs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EseUNBQXlDLGlDQUFpQztRQUMxRSxnSEFBZ0gsbUJBQW1CLEVBQUU7UUFDckk7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSwyQkFBMkIsMEJBQTBCLEVBQUU7UUFDdkQsaUNBQWlDLGVBQWU7UUFDaEQ7UUFDQTtRQUNBOztRQUVBO1FBQ0Esc0RBQXNELCtEQUErRDs7UUFFckg7UUFDQTs7O1FBR0E7UUFDQTs7Ozs7Ozs7Ozs7OztBQ2xGQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQWE7QUFDNkI7QUFDTjtBQUNJO0FBQ0M7QUFFekMsc0RBQUcs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K0RBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNqRCxDQUFDO0NBQUEiLCJmaWxlIjoicmVhZGFwdC5kZXYubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IFwiLi9zcmMvY2xpZW50LmpzXCIpO1xuIiwiJ3VzZSBzdHJpY3QnO1xyXG5pbXBvcnQge2gsIGggYXMgY3JlYXRlRWxlbWVudH0gZnJvbSAnLi9oJztcclxuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuL2NvbXBvbmVudCc7XHJcbmltcG9ydCB7RE9NfSBmcm9tICcuL3JlYWRhcHQtZG9tL2luZGV4JztcclxuaW1wb3J0IHtyZW5kZXIsIGh5ZHJhdGV9IGZyb20gJy4vcmVuZGVyJztcclxuXHJcbkRPTS5kb2N1bWVudCA9IGRvY3VtZW50O1xyXG53aW5kb3cuaCA9IGg7XHJcbndpbmRvdy5Db21wb25lbnQgPSBDb21wb25lbnQ7XHJcbndpbmRvdy5SZWFkYXB0ID0ge1xyXG4gICAgcmVuZGVyOiByZW5kZXIsXHJcbiAgICBoeWRyYXRlOiBoeWRyYXRlXHJcbn07XHJcbndpbmRvdy5SZWFjdCA9IHtcclxuICAgIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnQsXHJcbiAgICByZW5kZXI6IHJlbmRlcixcclxuICAgIGh5ZHJhdGU6IGh5ZHJhdGVcclxufTsiLCIndXNlIHN0cmljdCc7XHJcbmltcG9ydCB7cmVtb3ZlTm9kZX0gZnJvbSAnLi9yZWFkYXB0LWRvbS9pbmRleCc7XHJcbmltcG9ydCBWTm9kZSBmcm9tICcuL3JlYWRhcHQtdmRvbS92bm9kZSc7XHJcbmltcG9ydCB7IEFUVFJfS0VZLCBBU1lOQywgU1lOQywgZXh0ZW5kIH0gZnJvbSAnLi9jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBkaWZmLCByZWNvbGxlY3ROb2RlVHJlZSB9IGZyb20gJy4vcmVhZGFwdC12ZG9tL2RpZmYnO1xyXG5pbXBvcnQgeyBkaWZmTGV2ZWx9IGZyb20gJy4vcmVhZGFwdC12ZG9tL2RpZmYnO1xyXG5pbXBvcnQgeyBlbnF1ZXVlLCBlbnF1ZXVlU3RhdGUgfSBmcm9tICcuL3JlbmRlcic7XHJcblxyXG5leHBvcnQgY29uc3QgREVGRVJfUFJPTUlTRSA9IFByb21pc2UucmVzb2x2ZSgpLnRoZW4uYmluZChQcm9taXNlLnJlc29sdmUoKSk7XHJcbmV4cG9ydCBjb25zdCBERUZFUl9USU1FT1VUID0gc2V0VGltZW91dDtcclxuZXhwb3J0IGNvbnN0IERFRkVSX0FOSU1BVElPTiA9IHR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgIT09ICd1bmRlZmluZWQnID8gcmVxdWVzdEFuaW1hdGlvbkZyYW1lIDogREVGRVJfUFJPTUlTRTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBvbmVudCB7XHJcbiAgICBrZXk6IGFueTtcclxuICAgIHJlZjogYW55O1xyXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XHJcbiAgICBwYXJlbnQgOiBhbnk7XHJcbiAgICBiYXNlOiBhbnk7XHJcbiAgICByZW5kZXJNb2RlOiBOdW1iZXI7XHJcbiAgICBjaGlsZDogYW55O1xyXG4gICAgYXN5bmNNZXRob2Q6IGFueTtcclxuICAgIHBhcmVudE5vZGU6IGFueTtcclxuICAgIGNoaWxkcmVuOiBBcnJheTxhbnk+O1xyXG4gICAgc3RhdGU6IE9iamVjdDtcclxuICAgIC8vY29udGFpbmVyIHRvIGhvbGQgb3JpZ2luYWwgcGFzc2VkIHByb3BzXHJcbiAgICBfX3Byb3BzOiBhbnk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJvcHM6IGFueSwgcGFyZW50OiBDb21wb25lbnQsIHJlbmRlck1vZGU6IGFueSkge1xyXG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmtleSA9IHByb3BzLmtleTtcclxuICAgICAgICB0aGlzLnJlZiA9IHByb3BzLnJlZjtcclxuICAgICAgICB0aGlzLmFzeW5jTWV0aG9kID0gREVGRVJfUFJPTUlTRTtcclxuICAgICAgICB0aGlzLnJlbmRlck1vZGUgPSByZW5kZXJNb2RlIHx8IFNZTkM7XHJcbiAgICAgICAgdGhpcy5jaGlsZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5iYXNlID0gbnVsbDtcclxuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcclxuICAgICAgICB0aGlzLnBhcmVudE5vZGUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcclxuICAgICAgICB0aGlzLnN0YXRlID0ge307XHJcbiAgICAgICAgdGhpcy5fX3Byb3BzID0gcHJvcHM7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZGVsZXRlIHByb3BzLnJlZjtcclxuICAgICAgICBkZWxldGUgcHJvcHMua2V5O1xyXG4gICBcclxuICAgICAgICB0aGlzLm9ic2VydmUocHJvcHMpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBhc3luYyBjb21wb25lbnRDaGFuZ2Uoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnksIHByZXZpb3VzOiBhbnkpIDogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICBpZih0aGlzLnNob3VsZENvbXBvbmVudFVwZGF0ZShrZXksdmFsdWUscHJldmlvdXMpKSB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMucmVuZGVyTW9kZSA9PT0gU1lOQykgYXdhaXQgcmVuZGVyQ29tcG9uZW50KHRoaXMsIHRoaXMucGFyZW50Tm9kZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICBlbHNlIGlmKHRoaXMucmVuZGVyTW9kZSA9PT0gQVNZTkMpIGVucXVldWUodGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGZvcmNlVXBkYXRlKCkgOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIGF3YWl0IHJlbmRlckNvbXBvbmVudCh0aGlzLCB0aGlzLnBhcmVudE5vZGUsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBjb21wb25lbnREaWRVcGRhdGUocHJldmlvdXMpIDogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyByZW5kZXIoKSA6IFByb21pc2U8YW55PiB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGNvbXBvbmVudFdpbGxVbm1vdW50KCkgOiBQcm9taXNlPGFueT4ge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBjb21wb25lbnREaWRNb3VudCgpIDogUHJvbWlzZTxhbnk+IHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGFzeW5jIHNldFN0YXRlKHNtOiBhbnkpIDogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICBjb25zdCB1cGRhdGUgPSBuZXcgUHJvbWlzZShhc3luYyAocixyaikgPT4ge1xyXG4gICAgICAgICAgICAvL2ltbXV0YWJsZSBmcm9tIG9yaWdpbmFsIHN0YXRlXHJcbiAgICAgICAgICAgIGNvbnN0IG9sZFN0YXRlID0gZXh0ZW5kKHt9LCB0aGlzLnN0YXRlKTtcclxuICAgICAgICAgICAgY29uc3QgZmluYWxTdGF0ZSA9IGV4dGVuZCh7fSwgdGhpcy5zdGF0ZSk7XHJcbiAgICAgICAgICAgIGxldCBuZXdTdGF0ZSA6IE9iamVjdCA9IHt9O1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHNtID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAvL2NvcHkgY3VycmVudCBwcm9wcyBmb3IgaW1tdXRhYmxlXHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wcyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX19wcm9wcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgayBpbiB0aGlzLl9fcHJvcHMpIHByb3BzW2tdID0gdGhpc1trXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vaW1tdXRhYmxlIGZyb20gb3JpZ2luYWwgc3RhdGVcclxuICAgICAgICAgICAgICAgIG5ld1N0YXRlID0gc20oZXh0ZW5kKG5ld1N0YXRlLCB0aGlzLnN0YXRlKSwgcHJvcHMpIHx8IG5ld1N0YXRlO1xyXG4gICAgICAgICAgICAgICAgZXh0ZW5kKGZpbmFsU3RhdGUsIG5ld1N0YXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKHR5cGVvZiBzbSA9PT0gJ29iamVjdCcpIGV4dGVuZChmaW5hbFN0YXRlLCBzbSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gZmluYWxTdGF0ZTtcclxuXHJcbiAgICAgICAgICAgIGZvcihsZXQgayBpbiBmaW5hbFN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICBpZihvbGRTdGF0ZVtrXSAhPT0gZmluYWxTdGF0ZVtrXSkgYXdhaXQgdGhpcy5jb21wb25lbnRDaGFuZ2UoaywgbmV3U3RhdGVba10sIG9sZFN0YXRlW2tdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHRoaXMucmVuZGVyTW9kZSA9PT0gU1lOQykgYXdhaXQgdXBkYXRlO1xyXG4gICAgICAgIGVsc2UgaWYodGhpcy5yZW5kZXJNb2RlID09PSBBU1lOQykgZW5xdWV1ZVN0YXRlKHRoaXMsIHVwZGF0ZSk7XHJcbiAgICB9IFxyXG5cclxuICAgIHByb3RlY3RlZCBzaG91bGRDb21wb25lbnRVcGRhdGUoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnksIHByZXZpb3VzOiBhbnkpIDogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG9ic2VydmUobzogT2JqZWN0KSB7XHJcbiAgICAgICAgZm9yKGxldCBrIGluIG8pIHtcclxuICAgICAgICAgICAgbGV0IHYgOiBhbnkgPSBvW2tdO1xyXG5cclxuICAgICAgICAgICAgaWYodHlwZW9mIHYgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIHRoaXNba10gPSB2O1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBgXFwkJHtrfWAsIHt2YWx1ZTogdiwgd3JpdGFibGU6IHRydWUsIGVudW1lcmFibGU6IGZhbHNlIH0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIGssIHtcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBnZXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbYFxcJCR7a31gXTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzZXQobnY6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSB0aGlzW2BcXCQke2t9YF07XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpc1tgXFwkJHtrfWBdID0gbnY7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCF0aGlzLmRpc2FibGVkICYmIHByZXYgIT09IG52KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcG9uZW50Q2hhbmdlKGssbnYscHJldik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZW5kZXJDb21wb25lbnQoY29tcG9uZW50OiBDb21wb25lbnQsIHBhcmVudE5vZGU6IGFueSwgaHlkcmF0aW5nOiBib29sZWFuKSB7XHJcbiAgICBsZXQgaXNVcGRhdGUgPSBjb21wb25lbnQuYmFzZSwgcCwgcHJvcHMsIHJlbmRlcmVkLCB0b1VubW91bnQsIGNiYXNlLCBpbnN0LCBiYXNlLCB0eXBlO1xyXG4gICAgaWYoY29tcG9uZW50LmRpc2FibGVkKSByZXR1cm47XHJcblxyXG4gICAgcmVuZGVyZWQgPSBhd2FpdCBjb21wb25lbnQucmVuZGVyKCk7XHJcblxyXG4gICAgaWYoIXJlbmRlcmVkIHx8IEFycmF5LmlzQXJyYXkocmVuZGVyZWQpKSB7XHJcbiAgICAgICAgaWYoY29tcG9uZW50LmNoaWxkKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHVubW91bnRDb21wb25lbnQoY29tcG9uZW50LmNoaWxkKTtcclxuICAgICAgICAgICAgY29tcG9uZW50LmNoaWxkID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoY29tcG9uZW50LmJhc2UpIHtcclxuICAgICAgICAgICAgY29tcG9uZW50LmJhc2UuX2NvbXBvbmVudCA9IG51bGw7XHJcbiAgICAgICAgICAgIGF3YWl0IHJlY29sbGVjdE5vZGVUcmVlKGNvbXBvbmVudC5iYXNlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGNvbXBvbmVudC5iYXNlID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudC5wYXJlbnROb2RlID0gcGFyZW50Tm9kZTtcclxuICAgIGNiYXNlID0gYmFzZSA9IGNvbXBvbmVudC5iYXNlO1xyXG5cclxuICAgIGlmKHR5cGVvZiByZW5kZXJlZC5ub2RlTmFtZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIHByb3BzID0gcmVuZGVyZWQuYXR0cmlidXRlcztcclxuICAgICAgICBpbnN0ID0gY29tcG9uZW50LmNoaWxkO1xyXG4gICAgICAgIGlmKGluc3QgJiYgaW5zdC5jb25zdHJ1Y3RvciA9PT0gcmVuZGVyZWQubm9kZU5hbWUpIHtcclxuICAgICAgICAgICAgY29uc3QgdXBkYXRlID0gcHJlcGFyZVJlbmRlcihpbnN0LCBwcm9wcywgcmVuZGVyZWQuY2hpbGROb2Rlcyk7XHJcbiAgICAgICAgICAgIGlmKHVwZGF0ZS5fZGlmZmVyZW50KSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCByZW5kZXJDb21wb25lbnQoaW5zdCwgaW5zdC5wYXJlbnROb2RlLCBoeWRyYXRpbmcpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgaW5zdC5jb21wb25lbnREaWRVcGRhdGUodXBkYXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdG9Vbm1vdW50ID0gaW5zdDsgdHlwZSA9IHJlbmRlcmVkLm5vZGVOYW1lO1xyXG5cclxuICAgICAgICAgICAgaWYoY2Jhc2UgJiYgIXRvVW5tb3VudCAmJiAhaHlkcmF0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICBjYmFzZS5fY29tcG9uZW50ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHJlY29sbGVjdE5vZGVUcmVlKGNiYXNlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbXBvbmVudC5jaGlsZCA9IGluc3QgPSBuZXcgdHlwZShwcm9wcywgY29tcG9uZW50KTtcclxuICAgICAgICAgICAgaWYgKGh5ZHJhdGluZykgaW5zdC5iYXNlID0gY2Jhc2U7XHJcbiAgICAgICAgICAgIGluc3QuY2hpbGRyZW4gPSByZW5kZXJlZC5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICBpZihpbnN0LnJlZikgaW5zdC5yZWYoaW5zdCk7XHJcbiAgICAgICAgICAgIGF3YWl0IHJlbmRlckNvbXBvbmVudChpbnN0LCBjb21wb25lbnQucGFyZW50Tm9kZSwgaHlkcmF0aW5nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGJhc2UgPSBpbnN0LmJhc2U7XHJcbiAgICB9XHJcbiAgICBpZih0eXBlb2YgcmVuZGVyZWQubm9kZU5hbWUgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICB0b1VubW91bnQgPSBjb21wb25lbnQuY2hpbGQ7XHJcbiAgICAgICAgaWYodG9Vbm1vdW50KSBjYmFzZSA9IGNvbXBvbmVudC5jaGlsZCA9IG51bGw7XHJcbiAgICAgICAgYmFzZSA9IGF3YWl0IGRpZmYoY2Jhc2UsIHJlbmRlcmVkLCBjb21wb25lbnQucGFyZW50Tm9kZSwgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYoY2Jhc2UgJiYgYmFzZSAhPT0gY2Jhc2UgJiYgaW5zdCAhPT0gY29tcG9uZW50LmNoaWxkKSB7XHJcbiAgICAgICAgcCA9IGNiYXNlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgaWYocCAmJiBiYXNlICE9PSBwKSB7XHJcbiAgICAgICAgICAgIHAucmVwbGFjZUNoaWxkKGJhc2UsIGNiYXNlKTtcclxuXHJcbiAgICAgICAgICAgIGlmKCF0b1VubW91bnQpIHtcclxuICAgICAgICAgICAgICAgIGNiYXNlLl9jb21wb25lbnQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgcmVjb2xsZWN0Tm9kZVRyZWUoY2Jhc2UsIGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZih0b1VubW91bnQpIGF3YWl0IHVubW91bnRDb21wb25lbnQodG9Vbm1vdW50KTtcclxuXHJcbiAgICBjb21wb25lbnQuYmFzZSA9IGJhc2U7XHJcbiAgICBpZihiYXNlICYmICFjb21wb25lbnQuY2hpbGQpIHtcclxuICAgICAgICBsZXQgY21wID0gY29tcG9uZW50LCB0ID0gY29tcG9uZW50O1xyXG5cclxuICAgICAgICB3aGlsZSgodCA9IHQucGFyZW50KSkge1xyXG4gICAgICAgICAgICAoY21wID0gdCkuYmFzZSA9IGJhc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBiYXNlLl9jb21wb25lbnQgPSBjbXA7XHJcbiAgICB9IFxyXG4gICAgaWYoIWlzVXBkYXRlKSB7XHJcbiAgICAgICAgYXdhaXQgY29tcG9uZW50LmNvbXBvbmVudERpZE1vdW50KCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlUmVuZGVyKGluc3Q6IENvbXBvbmVudCwgcHJvcHM6IGFueSwgY2hpbGRyZW46IEFycmF5PGFueT4pIDogYW55IHtcclxuICAgIGxldCBkaWZmID0ge19kaWZmZXJlbnQ6IGZhbHNlfTtcclxuICAgIGlmKGluc3QucmVmKSBpbnN0LnJlZihpbnN0KTtcclxuICAgIGluc3QuY2hpbGRyZW4gPSBjaGlsZHJlbjtcclxuXHJcbiAgICBpbnN0LmRpc2FibGVkID0gdHJ1ZTtcclxuICAgIGZvcihsZXQgbiBpbiBwcm9wcykge1xyXG5cdFx0aWYoaW5zdFtuXSAhPT0gcHJvcHNbbl0pIHtcclxuXHRcdFx0ZGlmZltuXSA9IGluc3Rbbl07XHJcblx0XHRcdGRpZmYuX2RpZmZlcmVudCA9IHRydWU7XHJcblx0XHR9XHJcblx0XHRpbnN0W25dID0gcHJvcHNbbl07XHJcbiAgICB9XHJcbiAgICBpbnN0LmRpc2FibGVkID0gZmFsc2U7XHJcblxyXG4gICAgcmV0dXJuIGRpZmY7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1bm1vdW50Q29tcG9uZW50KGNvbXBvbmVudDogQ29tcG9uZW50KSB7XHJcbiAgICBjb25zdCBiYXNlID0gY29tcG9uZW50LmJhc2U7XHJcbiAgICBjb21wb25lbnQuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgYXdhaXQgY29tcG9uZW50LmNvbXBvbmVudFdpbGxVbm1vdW50KCk7XHJcbiAgICBpZihjb21wb25lbnQuY2hpbGQpIGF3YWl0IHVubW91bnRDb21wb25lbnQoY29tcG9uZW50LmNoaWxkKTtcclxuICAgIGNvbXBvbmVudC5iYXNlID0gbnVsbDtcclxuICAgIGNvbXBvbmVudC5wYXJlbnQgPSBudWxsO1xyXG4gICAgY29tcG9uZW50LmNoaWxkID0gbnVsbDtcclxuICAgIGlmKGJhc2UpIHtcclxuICAgICAgICBiYXNlLl9jb21wb25lbnQgPSBudWxsO1xyXG4gICAgICAgIGlmKGJhc2VbQVRUUl9LRVldICYmIGJhc2VbQVRUUl9LRVldLnJlZikgYmFzZVtBVFRSX0tFWV0ucmVmKG51bGwpO1xyXG5cclxuICAgICAgICBhd2FpdCByZWNvbGxlY3ROb2RlVHJlZShiYXNlLCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgICBpZihjb21wb25lbnQucmVmKSBjb21wb25lbnQucmVmKG51bGwpO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYnVpbGRDb21wb25lbnQoZG9tOiBhbnksIG5vZGU6IFZOb2RlLCBwYXJlbnROb2RlOiBhbnksIGh5ZHJhdGluZzogYm9vbGVhbikge1xyXG4gICAgbGV0IGMgPSBkb20gJiYgZG9tLl9jb21wb25lbnQsXHJcbiAgICAgICAgaXNEaXJlY3RPd25lciA9IGMgJiYgYy5jb25zdHJ1Y3RvciA9PT0gbm9kZS5ub2RlTmFtZSxcclxuICAgICAgICBwcm9wcyA9IG5vZGUuYXR0cmlidXRlcyxcclxuICAgICAgICB0eXBlID0gbm9kZS5ub2RlTmFtZTtcclxuXHJcbiAgICBpZihpc0RpcmVjdE93bmVyICYmIGMpIHtcclxuICAgICAgICBjb25zdCB1cGRhdGUgPSBwcmVwYXJlUmVuZGVyKGMsIHByb3BzLCBub2RlLmNoaWxkTm9kZXMpO1xyXG4gICAgICAgIGlmKHVwZGF0ZS5fZGlmZmVyZW50KSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHJlbmRlckNvbXBvbmVudChjLCBwYXJlbnROb2RlLCBoeWRyYXRpbmcpO1xyXG4gICAgICAgICAgICBhd2FpdCBjLmNvbXBvbmVudERpZFVwZGF0ZSh1cGRhdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkb20gPSBjLmJhc2U7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZighaHlkcmF0aW5nKSBhd2FpdCByZWNvbGxlY3ROb2RlVHJlZShkb20sIGZhbHNlKTtcclxuICAgICAgICBjID0gbmV3IHR5cGUocHJvcHMsIG51bGwpO1xyXG4gICAgICAgIGMuY2hpbGRyZW4gPSBub2RlLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgaWYgKGh5ZHJhdGluZykgYy5iYXNlID0gZG9tO1xyXG4gICAgICAgIGlmKGMucmVmKSBjLnJlZihjKTtcclxuICAgICAgICBhd2FpdCByZW5kZXJDb21wb25lbnQoYywgcGFyZW50Tm9kZSwgaHlkcmF0aW5nKTtcclxuICAgICAgICBkb20gPSBjLmJhc2U7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiBkb207XHJcbn0iLCIndXNlIHN0cmljdCc7XHJcblxyXG5leHBvcnQgY29uc3QgQVRUUl9LRVkgPSAnX19yZWFkYXB0X18nO1xyXG5leHBvcnQgY29uc3QgQVNZTkMgPSAzO1xyXG5leHBvcnQgY29uc3QgU1lOQyA9IDE7XHJcbmV4cG9ydCBjb25zdCBOT05FID0gMDtcclxuZXhwb3J0IGNvbnN0IEZPUkNFID0gMjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBleHRlbmQoYmFzZTogT2JqZWN0LCByZWY6IE9iamVjdCkge1xyXG4gICAgZm9yKGxldCBrIGluIHJlZikgYmFzZVtrXSA9IHJlZltrXTtcclxuICAgIHJldHVybiBiYXNlO1xyXG59OyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmltcG9ydCBWTm9kZSBmcm9tICcuL3JlYWRhcHQtdmRvbS92bm9kZSc7XHJcbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi9jb21wb25lbnQnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGgobm9kZU5hbWU6IHN0cmluZyB8IENvbXBvbmVudCwgYXR0cmlidXRlczogYW55LCAuLi5jaGlsZHJlbikge1xyXG4gICAgYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXMgfHwge307XHJcbiAgICBjb25zdCBzdGFjayA9IEFycmF5PGFueT4oMCk7XHJcbiAgICBsZXQgY2hpbGQsIHAgPSBuZXcgVk5vZGUobm9kZU5hbWUsIHR5cGVvZiBub2RlTmFtZSA9PT0gJ2Z1bmN0aW9uJyA/ICdjb21wb25lbnQnIDogJ2VsZW1lbnQnLCAnJyk7XHJcblxyXG4gICAgY2hpbGRyZW4uZm9yRWFjaChjID0+IHN0YWNrLnVuc2hpZnQoYykpO1xyXG4gICAgaWYoYXR0cmlidXRlcyAmJiBhdHRyaWJ1dGVzLmNoaWxkcmVuICE9IG51bGwpIHtcclxuICAgICAgICBpZighc3RhY2subGVuZ3RoKSBzdGFjay5wdXNoKGF0dHJpYnV0ZXMuY2hpbGRyZW4pO1xyXG4gICAgICAgIGRlbGV0ZSBhdHRyaWJ1dGVzLmNoaWxkcmVuO1xyXG4gICAgfVxyXG5cclxuICAgIHdoaWxlKHN0YWNrLmxlbmd0aCkge1xyXG4gICAgICAgIGNoaWxkID0gc3RhY2sucG9wKCk7XHJcbiAgICAgICAgaWYoQXJyYXkuaXNBcnJheShjaGlsZCkpIGNoaWxkLmZvckVhY2goYyA9PiBzdGFjay51bnNoaWZ0KGMpKTtcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYoY2hpbGQgaW5zdGFuY2VvZiBWTm9kZSkgcC5jaGlsZE5vZGVzLnB1c2goY2hpbGQpO1xyXG4gICAgICAgICAgICBlbHNlIHAuY2hpbGROb2Rlcy5wdXNoKG5ldyBWTm9kZSgnI3RleHQnLCAndGV4dCcsIGNoaWxkKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzO1xyXG4gICAgcC5rZXkgPSBhdHRyaWJ1dGVzLmtleSA/IGF0dHJpYnV0ZXMua2V5IDogdW5kZWZpbmVkO1xyXG5cclxuICAgIHJldHVybiBwO1xyXG59OyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmV4cG9ydCBjb25zdCBET00gOiBhbnkgPSB7XHJcbiAgICBkb2N1bWVudDogbnVsbFxyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU5vZGUobm9kZU5hbWU6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIERPTS5kb2N1bWVudC5jcmVhdGVFbGVtZW50KG5vZGVOYW1lKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZU5vZGUobm9kZSkge1xyXG4gICAgY29uc3QgcGFyZW50Tm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcclxuICAgIGlmIChwYXJlbnROb2RlKSBwYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNTYW1lTm9kZVR5cGUobm9kZTogYW55LCB2bm9kZTogYW55LCBoeWRyYXRpbmc6IGJvb2xlYW4pIHtcclxuICAgIGlmKCFub2RlKSByZXR1cm4gZmFsc2U7XHJcbiAgICBpZih2bm9kZS5ub2RlVHlwZSA9PT0gJ3RleHQnKSByZXR1cm4gbm9kZS5zcGxpdFRleHQ7XHJcbiAgICBpZih0eXBlb2Ygdm5vZGUubm9kZU5hbWUgPT09ICdzdHJpbmcnKSByZXR1cm4gIW5vZGUuX2NvbXBvbmVudCAmJiBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IHZub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gICAgcmV0dXJuIGh5ZHJhdGluZyB8fCAobm9kZS5fY29tcG9uZW50ICYmIG5vZGUuX2NvbXBvbmVudC5jb25zdHJ1Y3RvciA9PT0gdm5vZGUubm9kZU5hbWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0QWNjZXNzb3Iobm9kZSwgbmFtZSwgb2xkLCB2YWx1ZSkge1xyXG4gICAgaWYobmFtZSA9PT0gJ2NsYXNzTmFtZScpIG5hbWUgPSAnY2xhc3MnO1xyXG4gICAgaWYobmFtZSA9PT0gJ19faHRtbCcpIG5hbWUgPSAnaHRtbCc7XHJcbiAgICBpZihuYW1lID09PSAna2V5Jykge1xyXG4gICAgICAgIC8vZG8gbm90aGluZ1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihuYW1lID09PSAncmVmJykge1xyXG4gICAgICAgIGlmKG9sZCAmJiB0eXBlb2Yob2xkKSA9PT0gJ2Z1bmN0aW9uJykgb2xkKG51bGwpO1xyXG4gICAgICAgIGlmKHZhbHVlICYmIHR5cGVvZih2YWx1ZSkgPT09ICdmdW5jdGlvbicpIHZhbHVlKG5vZGUpO1xyXG4gICAgfVxyXG4gICAgLy9wbGVhc2UgZm9yIHRoZSBsb3ZlIG9mIGdvZFxyXG4gICAgLy9uZXZlciB1c2UgdGhpcyB1bmxlc3MgeW91IHJlYWxseSBoYXZlIHRvXHJcbiAgICAvL2ZvciBzaG93aW5nIG1hcmsgZG93biBvciBzb21ldGhpbmcgc2ltaWxhclxyXG4gICAgZWxzZSBpZihuYW1lID09PSAnaHRtbCcpIHtcclxuICAgICAgICBpZihvbGQgIT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIG5vZGUuaW5uZXJIVE1MID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZihuYW1lID09PSAnY2xhc3MnKSB7XHJcbiAgICAgICAgaWYoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgbm9kZS5jbGFzc05hbWUgPSB2YWx1ZSB8fCAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZih2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIGlmKHR5cGVvZiBvbGQgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IGkgaW4gb2xkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoaSBpbiB2YWx1ZSkpIG5vZGUuY2xhc3NMaXN0LnJlbW92ZShpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IobGV0IGkgaW4gdmFsdWUpICB7XHJcbiAgICAgICAgICAgICAgICBpZih2YWx1ZVtpXSkgbm9kZS5jbGFzc0xpc3QuYWRkKGkpO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBub2RlLmNsYXNzTGlzdC5yZW1vdmUoaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKG5hbWUgPT09ICdzdHlsZScpIHtcclxuICAgICAgICBpZih2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIGlmKHR5cGVvZiBvbGQgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IGkgaW4gb2xkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoaSBpbiB2YWx1ZSkpIG5vZGUuc3R5bGVbaV0gPSAnJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIG5vZGUuc3R5bGUuY3NzVGV4dCA9ICcnO1xyXG4gICAgICAgICAgICBmb3IobGV0IGkgaW4gdmFsdWUpIG5vZGUuc3R5bGVbaV0gPSB2YWx1ZVtpXSB8fCAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZighdmFsdWUgfHwgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb2xkID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBub2RlLnN0eWxlLmNzc1RleHQgPSB2YWx1ZSB8fCAnJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKG5hbWVbMF0gPT09ICdvJyAmJiBuYW1lWzFdID09PSAnbicpIHtcclxuICAgICAgICBsZXQgdXNlQ2FwdHVyZSA9IG5hbWUgIT09IChuYW1lID0gbmFtZS5yZXBsYWNlKC9DYXB0dXJlJC8sICcnKSk7XHJcbiAgICAgICAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKS5zdWJzdHJpbmcoMik7XHJcbiAgICAgICAgaWYodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYoIW9sZCkgbm9kZS5hZGRFdmVudExpc3RlbmVyKG5hbWUsIHZhbHVlLCB1c2VDYXB0dXJlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihvbGQpIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCBvbGQsIHVzZUNhcHR1cmUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihuYW1lICE9PSAnbGlzdCcgJiYgbmFtZSAhPT0gJ3R5cGUnICYmIG5hbWUgaW4gbm9kZSkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIG5vZGVbbmFtZV0gPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgaWYoKHZhbHVlID09IG51bGwgfHwgdmFsdWUgPT09IGZhbHNlKSAmJiBuYW1lICE9PSAnc3BlbGxjaGVjaycpIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGlmKHZhbHVlID09IG51bGwgfHwgdmFsdWUgPT09IGZhbHNlKSBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcclxuICAgICAgICBlbHNlIGlmKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJykgbm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xyXG4gICAgfVxyXG59IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuaW1wb3J0IENvbXBvbmVudCwgeyBidWlsZENvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudCc7XHJcbmltcG9ydCBWTm9kZSBmcm9tICcuL3Zub2RlJztcclxuaW1wb3J0IHtBVFRSX0tFWX0gZnJvbSAnLi4vY29uc3RhbnRzJztcclxuaW1wb3J0IHtjcmVhdGVOb2RlLCBzZXRBY2Nlc3NvciwgaXNTYW1lTm9kZVR5cGUsIHJlbW92ZU5vZGV9IGZyb20gJy4uL3JlYWRhcHQtZG9tL2luZGV4JztcclxuaW1wb3J0IHt1bm1vdW50Q29tcG9uZW50fSBmcm9tICcuLi9jb21wb25lbnQnO1xyXG5pbXBvcnQge0RPTX0gZnJvbSAnLi4vcmVhZGFwdC1kb20vaW5kZXgnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGlucHV0cyA6IGFueSA9IFtcclxuICAgICdpbnB1dCcsXHJcbiAgICAndGV4dGFyZWEnLFxyXG4gICAgJ3NlbGVjdCcsXHJcbiAgICAnbWV0ZXInLFxyXG4gICAgJ3Byb2dyZXNzJyxcclxuICAgICdidXR0b24nXHJcbl07XHJcblxyXG5leHBvcnQgbGV0IGh5ZHJhdGluZyA9IGZhbHNlO1xyXG5leHBvcnQgbGV0IGRpZmZMZXZlbCA9IDA7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGlmZihkb206IGFueSwgbm9kZTogVk5vZGUsIHBhcmVudDogYW55LCByb290OiBib29sZWFuKSB7XHJcbiAgICBsZXQgcmV0IDogYW55ID0gbnVsbDtcclxuICAgIGlmKCFkaWZmTGV2ZWwrKykgaHlkcmF0aW5nID0gZG9tICYmICFkb21bQVRUUl9LRVldO1xyXG5cclxuICAgIHJldCA9IGF3YWl0IGlkaWZmKGRvbSwgbm9kZSwgcGFyZW50LCByb290KTtcclxuICAgIGlmKHBhcmVudCAmJiByZXQucGFyZW50Tm9kZSAhPT0gcGFyZW50KSBwYXJlbnQuYXBwZW5kQ2hpbGQocmV0KTtcclxuXHJcbiAgICBpZighLS1kaWZmTGV2ZWwpIHtcclxuICAgICAgICBoeWRyYXRpbmcgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmV0O1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBpZGlmZihkb206IGFueSwgbm9kZTogVk5vZGUsIHBhcmVudDogYW55LCByb290OiBib29sZWFuKSB7XHJcbiAgICBsZXQgb3V0IDogYW55ID0gZG9tO1xyXG4gICAgaWYobm9kZS5ub2RlVmFsdWUgPT0gbnVsbCB8fCB0eXBlb2Ygbm9kZS5ub2RlVmFsdWUgPT09ICdib29sZWFuJykgbm9kZS5ub2RlVmFsdWUgPSAnJztcclxuICAgIGlmKG5vZGUubm9kZVR5cGUgPT09ICd0ZXh0Jykge1xyXG4gICAgICAgIGlmKGRvbSAmJiBkb20uc3BsaXRUZXh0ICYmIGRvbS5wYXJlbnROb2RlICYmICghZG9tLl9jb21wb25lbnQgfHwgcm9vdCkpIHtcclxuICAgICAgICAgICAgaWYoZG9tLm5vZGVWYWx1ZSAhPSBub2RlLm5vZGVWYWx1ZSkgZG9tLm5vZGVWYWx1ZSA9IG5vZGUubm9kZVZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgb3V0ID0gRE9NLmRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG5vZGUubm9kZVZhbHVlKTtcclxuICAgICAgICAgICAgaWYoZG9tKSB7XHJcbiAgICAgICAgICAgICAgICBpZihkb20ucGFyZW50Tm9kZSkgZG9tLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG91dCwgZG9tKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHJlY29sbGVjdE5vZGVUcmVlKGRvbSwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvdXRbQVRUUl9LRVldID0ge307XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgbm9kZU5hbWUgOiBhbnkgPSBub2RlLm5vZGVOYW1lLCBucm9vdDtcclxuICAgIGlmKHR5cGVvZiBub2RlTmFtZSA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGF3YWl0IGJ1aWxkQ29tcG9uZW50KGRvbSwgbm9kZSwgcGFyZW50LCBoeWRyYXRpbmcpO1xyXG4gICAgaWYoIWRvbSB8fCBkb20ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gbm9kZU5hbWUudG9Mb3dlckNhc2UoKSkge1xyXG4gICAgICAgIG91dCA9IGNyZWF0ZU5vZGUobm9kZU5hbWUpO1xyXG4gICAgICAgIGlmKGRvbSkge1xyXG4gICAgICAgICAgICB3aGlsZShkb20uZmlyc3RDaGlsZCkgb3V0LmFwcGVuZENoaWxkKGRvbS5maXJzdENoaWxkKTtcclxuICAgICAgICAgICAgaWYoZG9tLnBhcmVudE5vZGUpIGRvbS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChvdXQsIGRvbSk7XHJcblxyXG4gICAgICAgICAgICAvL3JlY29sbGVjdFxyXG4gICAgICAgICAgICBhd2FpdCByZWNvbGxlY3ROb2RlVHJlZShkb20sIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBsZXQgcHJvcHMgOiBhbnkgPSBvdXRbQVRUUl9LRVldO1xyXG4gICAgaWYoIXByb3BzKSB7XHJcbiAgICAgICAgcHJvcHMgPSBvdXRbQVRUUl9LRVldID0ge307XHJcbiAgICAgICAgb3V0LmdldEF0dHJpYnV0ZU5hbWVzKCkuZm9yRWFjaChuID0+IHByb3BzW25dID0gb3V0LmdldEF0dHJpYnV0ZShuKSk7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGZjID0gb3V0LmZpcnN0Q2hpbGQsIGNoaWxkcmVuID0gbm9kZS5jaGlsZE5vZGVzO1xyXG4gICAgaWYoKGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCkgfHwgZmMpIGF3YWl0IGlubmVyRGlmZk5vZGUob3V0LCBjaGlsZHJlbiwgcm9vdCk7XHJcblxyXG4gICAgZGlmZkF0dHJpYnV0ZXMob3V0LCBub2RlLmF0dHJpYnV0ZXMsIHByb3BzKTtcclxuXHJcbiAgICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBpbm5lckRpZmZOb2RlKGRvbSwgdmNoaWxkcmVuOiBBcnJheTxWTm9kZT4sIHJvb3Q6IGJvb2xlYW4pIHtcclxuXHRsZXQgb3JpZ2luYWxDaGlsZHJlbiA9IGRvbS5jaGlsZE5vZGVzLFxyXG5cdFx0Y2hpbGRyZW4gPSBBcnJheTxhbnk+KCksXHJcblx0XHRrZXllZCA9IHt9LFxyXG5cdFx0a2V5ZWRMZW4gPSAwLFxyXG5cdFx0bWluID0gMCxcclxuXHRcdGxlbiA9IG9yaWdpbmFsQ2hpbGRyZW4ubGVuZ3RoLFxyXG5cdFx0Y2hpbGRyZW5MZW4gPSAwLFxyXG5cdFx0dmxlbiA9IHZjaGlsZHJlbiA/IHZjaGlsZHJlbi5sZW5ndGggOiAwLFxyXG5cdFx0aiwgYywgZiwgdmNoaWxkLCBjaGlsZDtcclxuXHJcblx0Ly8gQnVpbGQgdXAgYSBtYXAgb2Yga2V5ZWQgY2hpbGRyZW4gYW5kIGFuIEFycmF5IG9mIHVua2V5ZWQgY2hpbGRyZW46XHJcblx0aWYgKGxlbiE9PTApIHtcclxuXHRcdGZvciAobGV0IGk9MDsgaTxsZW47IGkrKykge1xyXG5cdFx0XHRsZXQgY2hpbGQgPSBvcmlnaW5hbENoaWxkcmVuW2ldLFxyXG5cdFx0XHRcdHByb3BzID0gY2hpbGRbQVRUUl9LRVldLFxyXG5cdFx0XHRcdGtleSA9IHZsZW4gJiYgcHJvcHMgPyBjaGlsZC5fY29tcG9uZW50ID8gY2hpbGQuX2NvbXBvbmVudC5rZXkgOiBwcm9wcy5rZXkgOiBudWxsO1xyXG5cdFx0XHRpZiAoa2V5IT1udWxsKSB7XHJcblx0XHRcdFx0a2V5ZWRMZW4rKztcclxuXHRcdFx0XHRrZXllZFtrZXldID0gY2hpbGQ7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZiAocHJvcHMgfHwgKGNoaWxkLnNwbGl0VGV4dCE9PXVuZGVmaW5lZCA/IChoeWRyYXRpbmcgPyBjaGlsZC5ub2RlVmFsdWUudHJpbSgpIDogdHJ1ZSkgOiBoeWRyYXRpbmcpKSB7XHJcblx0XHRcdFx0Y2hpbGRyZW5bY2hpbGRyZW5MZW4rK10gPSBjaGlsZDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0aWYgKHZsZW4hPT0wKSB7XHJcblx0XHRmb3IgKGxldCBpPTA7IGk8dmxlbjsgaSsrKSB7XHJcblx0XHRcdHZjaGlsZCA9IHZjaGlsZHJlbltpXTtcclxuXHRcdFx0Y2hpbGQgPSBudWxsO1xyXG5cclxuXHRcdFx0Ly8gYXR0ZW1wdCB0byBmaW5kIGEgbm9kZSBiYXNlZCBvbiBrZXkgbWF0Y2hpbmdcclxuXHRcdFx0bGV0IGtleSA9IHZjaGlsZC5rZXk7XHJcblx0XHRcdGlmIChrZXkhPW51bGwpIHtcclxuXHRcdFx0XHRpZiAoa2V5ZWRMZW4gJiYga2V5ZWRba2V5XSE9PXVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdFx0Y2hpbGQgPSBrZXllZFtrZXldO1xyXG5cdFx0XHRcdFx0a2V5ZWRba2V5XSA9IHVuZGVmaW5lZDtcclxuXHRcdFx0XHRcdGtleWVkTGVuLS07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdC8vIGF0dGVtcHQgdG8gcGx1Y2sgYSBub2RlIG9mIHRoZSBzYW1lIHR5cGUgZnJvbSB0aGUgZXhpc3RpbmcgY2hpbGRyZW5cclxuXHRcdFx0ZWxzZSBpZiAobWluPGNoaWxkcmVuTGVuKSB7XHJcblx0XHRcdFx0Zm9yIChqPW1pbjsgajxjaGlsZHJlbkxlbjsgaisrKSB7XHJcblx0XHRcdFx0XHRpZiAoY2hpbGRyZW5bal0hPT11bmRlZmluZWQgJiYgaXNTYW1lTm9kZVR5cGUoYyA9IGNoaWxkcmVuW2pdLCB2Y2hpbGQsIGh5ZHJhdGluZykpIHtcclxuXHRcdFx0XHRcdFx0Y2hpbGQgPSBjO1xyXG5cdFx0XHRcdFx0XHRjaGlsZHJlbltqXSA9IHVuZGVmaW5lZDtcclxuXHRcdFx0XHRcdFx0aWYgKGo9PT1jaGlsZHJlbkxlbi0xKSBjaGlsZHJlbkxlbi0tO1xyXG5cdFx0XHRcdFx0XHRpZiAoaj09PW1pbikgbWluKys7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gbW9ycGggdGhlIG1hdGNoZWQvZm91bmQvY3JlYXRlZCBET00gY2hpbGQgdG8gbWF0Y2ggdmNoaWxkIChkZWVwKVxyXG5cdFx0XHRjaGlsZCA9IGF3YWl0IGlkaWZmKGNoaWxkLCB2Y2hpbGQsIGRvbSwgcm9vdCk7XHJcblxyXG5cdFx0XHRmID0gb3JpZ2luYWxDaGlsZHJlbltpXTtcclxuXHRcdFx0aWYgKGNoaWxkICYmIGNoaWxkIT09ZG9tICYmIGNoaWxkIT09Zikge1xyXG5cdFx0XHRcdGlmIChmPT1udWxsKSB7XHJcblx0XHRcdFx0XHRkb20uYXBwZW5kQ2hpbGQoY2hpbGQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdGRvbS5pbnNlcnRCZWZvcmUoY2hpbGQsIGYpO1xyXG5cdFx0XHRcdFx0cmVtb3ZlTm9kZShmKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cclxuXHQvLyByZW1vdmUgdW51c2VkIGtleWVkIGNoaWxkcmVuOlxyXG5cdGlmIChrZXllZExlbikge1xyXG5cdFx0Zm9yIChsZXQgaSBpbiBrZXllZCkgaWYgKGtleWVkW2ldIT09dW5kZWZpbmVkKSBhd2FpdCByZWNvbGxlY3ROb2RlVHJlZShrZXllZFtpXSwgZmFsc2UpO1xyXG5cdH1cclxuXHJcblx0Ly8gcmVtb3ZlIG9ycGhhbmVkIHVua2V5ZWQgY2hpbGRyZW46XHJcblx0d2hpbGUgKG1pbjw9Y2hpbGRyZW5MZW4pIHtcclxuXHRcdGlmICgoY2hpbGQgPSBjaGlsZHJlbltjaGlsZHJlbkxlbi0tXSkhPT11bmRlZmluZWQpIGF3YWl0IHJlY29sbGVjdE5vZGVUcmVlKGNoaWxkLCBmYWxzZSk7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVjb2xsZWN0Tm9kZVRyZWUobm9kZTogYW55LCB1bm1vdW50T25seTogYm9vbGVhbikge1xyXG4gICAgaWYoIW5vZGUpIHJldHVybjtcclxuICAgIGxldCBjb21wb25lbnQgPSBub2RlLl9jb21wb25lbnQ7XHJcbiAgICBpZihjb21wb25lbnQpIGF3YWl0IHVubW91bnRDb21wb25lbnQoY29tcG9uZW50KTtcclxuICAgIGlmKG5vZGVbQVRUUl9LRVldICYmIG5vZGVbQVRUUl9LRVldLnJlZikgbm9kZVtBVFRSX0tFWV0ucmVmKG51bGwpO1xyXG4gICAgaWYodW5tb3VudE9ubHkgPT09IGZhbHNlIHx8IG5vZGVbQVRUUl9LRVldKSByZW1vdmVOb2RlKG5vZGUpO1xyXG4gICAgYXdhaXQgcmVtb3ZlQ2hpbGRyZW4obm9kZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZW1vdmVDaGlsZHJlbihub2RlOiBhbnkpIHtcclxuICAgIG5vZGUgPSBub2RlLmxhc3RDaGlsZDtcclxuICAgIHdoaWxlKG5vZGUpIHtcclxuICAgICAgICBsZXQgbmV4dCA9IG5vZGUucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgIGF3YWl0IHJlY29sbGVjdE5vZGVUcmVlKG5vZGUsIHRydWUpO1xyXG4gICAgICAgIG5vZGUgPSBuZXh0O1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBkaWZmQXR0cmlidXRlcyhkb206IGFueSwgYXR0cnM6IGFueSwgb2xkOiBhbnkpIHtcclxuICAgIGxldCBuYW1lO1xyXG4gICAgZm9yKG5hbWUgaW4gb2xkKSB7XHJcbiAgICAgICAgaWYoIShhdHRycyAmJiBhdHRyc1tuYW1lXSAhPSBudWxsKSAmJiBvbGRbbmFtZV0gIT0gbnVsbCkgc2V0QWNjZXNzb3IoZG9tLCBuYW1lLCBvbGRbbmFtZV0sIG9sZFtuYW1lXSA9IHVuZGVmaW5lZCk7XHJcbiAgICB9XHJcbiAgICBmb3IobmFtZSBpbiBhdHRycykge1xyXG4gICAgICAgIGlmKG5hbWUgIT09ICdjaGlsZHJlbicgJiYgbmFtZSAhPT0gJ2lubmVySFRNTCcgXHJcbiAgICAgICAgICAgICYmIChhdHRyc1tuYW1lXSAhPT0gKChuYW1lID09PSAndmFsdWUnIHx8IG5hbWUgPT09ICdjaGVja2VkJykgPyBkb21bbmFtZV0gOiBvbGRbbmFtZV0pKSkgc2V0QWNjZXNzb3IoZG9tLCBuYW1lLCBvbGRbbmFtZV0sIG9sZFtuYW1lXSA9IGF0dHJzW25hbWVdKTsgXHJcbiAgICB9XHJcbn0iLCIndXNlIHN0cmljdCc7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZOb2RlIHtcclxuICAgIGF0dHJpYnV0ZXM6IGFueTtcclxuICAgIG5vZGVOYW1lOiBhbnk7XHJcbiAgICBub2RlVHlwZTogc3RyaW5nO1xyXG4gICAgbm9kZVZhbHVlOiBhbnk7XHJcbiAgICBjaGlsZE5vZGVzOiBBcnJheTxhbnk+O1xyXG4gICAga2V5OiBhbnk7XHJcblxyXG4gICAgY29uc3RydWN0b3IobmFtZTogYW55LCB0eXBlOiBzdHJpbmcsIHY6IGFueSApIHtcclxuICAgICAgICB0aGlzLm5vZGVOYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLm5vZGVUeXBlID0gdHlwZTtcclxuICAgICAgICB0aGlzLm5vZGVWYWx1ZSA9IHY7XHJcbiAgICAgICAgdGhpcy5jaGlsZE5vZGVzID0gQXJyYXk8YW55PigwKTtcclxuICAgIH1cclxufSIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmltcG9ydCBDb21wb25lbnQsIHsgREVGRVJfUFJPTUlTRSwgcmVuZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnQnO1xyXG5pbXBvcnQgVk5vZGUgZnJvbSAnLi9yZWFkYXB0LXZkb20vdm5vZGUnO1xyXG5pbXBvcnQgeyBkaWZmIH0gZnJvbSAnLi9yZWFkYXB0LXZkb20vZGlmZic7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZW5xdWV1ZShjb21wb25lbnQ6IENvbXBvbmVudCkge1xyXG4gICAgKGNvbXBvbmVudC5hc3luY01ldGhvZCB8fCBERUZFUl9QUk9NSVNFKShhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgYXdhaXQgcmVuZGVyQ29tcG9uZW50KGNvbXBvbmVudCwgY29tcG9uZW50LnBhcmVudE5vZGUsIGZhbHNlKTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBlbnF1ZXVlU3RhdGUoY29tcG9uZW50OiBDb21wb25lbnQsIHN0YXRlOiBQcm9taXNlPGFueT4pIHtcclxuICAgIChjb21wb25lbnQuYXN5bmNNZXRob2QgfHwgREVGRVJfUFJPTUlTRSkoYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGF3YWl0IHN0YXRlO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGh5ZHJhdGUobm9kZTogVk5vZGUsIHBhcmVudDogYW55KSB7XHJcbiAgICByZXR1cm4gYXdhaXQgcmVuZGVyKG5vZGUsIHBhcmVudCwgcGFyZW50LmZpcnN0RWxlbWVudENoaWxkKTtcclxufVxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVuZGVyKG5vZGU6IFZOb2RlLCBwYXJlbnQ6IGFueSwgbWVyZ2U6IGFueSkge1xyXG4gICAgcmV0dXJuIGF3YWl0IGRpZmYobWVyZ2UsIG5vZGUsIHBhcmVudCwgdHJ1ZSk7XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9